
BMP_280_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a1c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c50  08004c50  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08004c50  08004c50  00014c50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004c58  08004c58  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c58  08004c58  00014c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c5c  08004c5c  00014c5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08004c60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020060  2**0
                  CONTENTS
 10 .bss          00000228  20000060  20000060  00020060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000288  20000288  00020060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000af91  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001ad3  00000000  00000000  0002b064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000960  00000000  00000000  0002cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000074a  00000000  00000000  0002d498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020e2b  00000000  00000000  0002dbe2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000d855  00000000  00000000  0004ea0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c5796  00000000  00000000  0005c262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002aa8  00000000  00000000  001219f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000069  00000000  00000000  001244a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b8c 	.word	0x08004b8c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08004b8c 	.word	0x08004b8c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2iz>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d215      	bcs.n	80009aa <__aeabi_d2iz+0x36>
 800097e:	d511      	bpl.n	80009a4 <__aeabi_d2iz+0x30>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d912      	bls.n	80009b0 <__aeabi_d2iz+0x3c>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800099a:	fa23 f002 	lsr.w	r0, r3, r2
 800099e:	bf18      	it	ne
 80009a0:	4240      	negne	r0, r0
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d105      	bne.n	80009bc <__aeabi_d2iz+0x48>
 80009b0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	bf08      	it	eq
 80009b6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ba:	4770      	bx	lr
 80009bc:	f04f 0000 	mov.w	r0, #0
 80009c0:	4770      	bx	lr
 80009c2:	bf00      	nop

080009c4 <__aeabi_d2f>:
 80009c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009c8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009cc:	bf24      	itt	cs
 80009ce:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009d2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009d6:	d90d      	bls.n	80009f4 <__aeabi_d2f+0x30>
 80009d8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009dc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009e0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009e4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009e8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009ec:	bf08      	it	eq
 80009ee:	f020 0001 	biceq.w	r0, r0, #1
 80009f2:	4770      	bx	lr
 80009f4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009f8:	d121      	bne.n	8000a3e <__aeabi_d2f+0x7a>
 80009fa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009fe:	bfbc      	itt	lt
 8000a00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a04:	4770      	bxlt	lr
 8000a06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a0e:	f1c2 0218 	rsb	r2, r2, #24
 8000a12:	f1c2 0c20 	rsb	ip, r2, #32
 8000a16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a1e:	bf18      	it	ne
 8000a20:	f040 0001 	orrne.w	r0, r0, #1
 8000a24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a30:	ea40 000c 	orr.w	r0, r0, ip
 8000a34:	fa23 f302 	lsr.w	r3, r3, r2
 8000a38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a3c:	e7cc      	b.n	80009d8 <__aeabi_d2f+0x14>
 8000a3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a42:	d107      	bne.n	8000a54 <__aeabi_d2f+0x90>
 8000a44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a48:	bf1e      	ittt	ne
 8000a4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a52:	4770      	bxne	lr
 8000a54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop

08000a64 <__aeabi_uldivmod>:
 8000a64:	b953      	cbnz	r3, 8000a7c <__aeabi_uldivmod+0x18>
 8000a66:	b94a      	cbnz	r2, 8000a7c <__aeabi_uldivmod+0x18>
 8000a68:	2900      	cmp	r1, #0
 8000a6a:	bf08      	it	eq
 8000a6c:	2800      	cmpeq	r0, #0
 8000a6e:	bf1c      	itt	ne
 8000a70:	f04f 31ff 	movne.w	r1, #4294967295
 8000a74:	f04f 30ff 	movne.w	r0, #4294967295
 8000a78:	f000 b970 	b.w	8000d5c <__aeabi_idiv0>
 8000a7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a84:	f000 f806 	bl	8000a94 <__udivmoddi4>
 8000a88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a90:	b004      	add	sp, #16
 8000a92:	4770      	bx	lr

08000a94 <__udivmoddi4>:
 8000a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a98:	9e08      	ldr	r6, [sp, #32]
 8000a9a:	460d      	mov	r5, r1
 8000a9c:	4604      	mov	r4, r0
 8000a9e:	460f      	mov	r7, r1
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d14a      	bne.n	8000b3a <__udivmoddi4+0xa6>
 8000aa4:	428a      	cmp	r2, r1
 8000aa6:	4694      	mov	ip, r2
 8000aa8:	d965      	bls.n	8000b76 <__udivmoddi4+0xe2>
 8000aaa:	fab2 f382 	clz	r3, r2
 8000aae:	b143      	cbz	r3, 8000ac2 <__udivmoddi4+0x2e>
 8000ab0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab4:	f1c3 0220 	rsb	r2, r3, #32
 8000ab8:	409f      	lsls	r7, r3
 8000aba:	fa20 f202 	lsr.w	r2, r0, r2
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	409c      	lsls	r4, r3
 8000ac2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ac6:	fa1f f58c 	uxth.w	r5, ip
 8000aca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ace:	0c22      	lsrs	r2, r4, #16
 8000ad0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ad4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad8:	fb01 f005 	mul.w	r0, r1, r5
 8000adc:	4290      	cmp	r0, r2
 8000ade:	d90a      	bls.n	8000af6 <__udivmoddi4+0x62>
 8000ae0:	eb1c 0202 	adds.w	r2, ip, r2
 8000ae4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae8:	f080 811c 	bcs.w	8000d24 <__udivmoddi4+0x290>
 8000aec:	4290      	cmp	r0, r2
 8000aee:	f240 8119 	bls.w	8000d24 <__udivmoddi4+0x290>
 8000af2:	3902      	subs	r1, #2
 8000af4:	4462      	add	r2, ip
 8000af6:	1a12      	subs	r2, r2, r0
 8000af8:	b2a4      	uxth	r4, r4
 8000afa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000afe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b06:	fb00 f505 	mul.w	r5, r0, r5
 8000b0a:	42a5      	cmp	r5, r4
 8000b0c:	d90a      	bls.n	8000b24 <__udivmoddi4+0x90>
 8000b0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b16:	f080 8107 	bcs.w	8000d28 <__udivmoddi4+0x294>
 8000b1a:	42a5      	cmp	r5, r4
 8000b1c:	f240 8104 	bls.w	8000d28 <__udivmoddi4+0x294>
 8000b20:	4464      	add	r4, ip
 8000b22:	3802      	subs	r0, #2
 8000b24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b28:	1b64      	subs	r4, r4, r5
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	b11e      	cbz	r6, 8000b36 <__udivmoddi4+0xa2>
 8000b2e:	40dc      	lsrs	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	e9c6 4300 	strd	r4, r3, [r6]
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	428b      	cmp	r3, r1
 8000b3c:	d908      	bls.n	8000b50 <__udivmoddi4+0xbc>
 8000b3e:	2e00      	cmp	r6, #0
 8000b40:	f000 80ed 	beq.w	8000d1e <__udivmoddi4+0x28a>
 8000b44:	2100      	movs	r1, #0
 8000b46:	e9c6 0500 	strd	r0, r5, [r6]
 8000b4a:	4608      	mov	r0, r1
 8000b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b50:	fab3 f183 	clz	r1, r3
 8000b54:	2900      	cmp	r1, #0
 8000b56:	d149      	bne.n	8000bec <__udivmoddi4+0x158>
 8000b58:	42ab      	cmp	r3, r5
 8000b5a:	d302      	bcc.n	8000b62 <__udivmoddi4+0xce>
 8000b5c:	4282      	cmp	r2, r0
 8000b5e:	f200 80f8 	bhi.w	8000d52 <__udivmoddi4+0x2be>
 8000b62:	1a84      	subs	r4, r0, r2
 8000b64:	eb65 0203 	sbc.w	r2, r5, r3
 8000b68:	2001      	movs	r0, #1
 8000b6a:	4617      	mov	r7, r2
 8000b6c:	2e00      	cmp	r6, #0
 8000b6e:	d0e2      	beq.n	8000b36 <__udivmoddi4+0xa2>
 8000b70:	e9c6 4700 	strd	r4, r7, [r6]
 8000b74:	e7df      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000b76:	b902      	cbnz	r2, 8000b7a <__udivmoddi4+0xe6>
 8000b78:	deff      	udf	#255	; 0xff
 8000b7a:	fab2 f382 	clz	r3, r2
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8090 	bne.w	8000ca4 <__udivmoddi4+0x210>
 8000b84:	1a8a      	subs	r2, r1, r2
 8000b86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8a:	fa1f fe8c 	uxth.w	lr, ip
 8000b8e:	2101      	movs	r1, #1
 8000b90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b94:	fb07 2015 	mls	r0, r7, r5, r2
 8000b98:	0c22      	lsrs	r2, r4, #16
 8000b9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ba2:	4290      	cmp	r0, r2
 8000ba4:	d908      	bls.n	8000bb8 <__udivmoddi4+0x124>
 8000ba6:	eb1c 0202 	adds.w	r2, ip, r2
 8000baa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bae:	d202      	bcs.n	8000bb6 <__udivmoddi4+0x122>
 8000bb0:	4290      	cmp	r0, r2
 8000bb2:	f200 80cb 	bhi.w	8000d4c <__udivmoddi4+0x2b8>
 8000bb6:	4645      	mov	r5, r8
 8000bb8:	1a12      	subs	r2, r2, r0
 8000bba:	b2a4      	uxth	r4, r4
 8000bbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bcc:	45a6      	cmp	lr, r4
 8000bce:	d908      	bls.n	8000be2 <__udivmoddi4+0x14e>
 8000bd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd8:	d202      	bcs.n	8000be0 <__udivmoddi4+0x14c>
 8000bda:	45a6      	cmp	lr, r4
 8000bdc:	f200 80bb 	bhi.w	8000d56 <__udivmoddi4+0x2c2>
 8000be0:	4610      	mov	r0, r2
 8000be2:	eba4 040e 	sub.w	r4, r4, lr
 8000be6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bea:	e79f      	b.n	8000b2c <__udivmoddi4+0x98>
 8000bec:	f1c1 0720 	rsb	r7, r1, #32
 8000bf0:	408b      	lsls	r3, r1
 8000bf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000bfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000c02:	40fd      	lsrs	r5, r7
 8000c04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c08:	4323      	orrs	r3, r4
 8000c0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c0e:	fa1f fe8c 	uxth.w	lr, ip
 8000c12:	fb09 5518 	mls	r5, r9, r8, r5
 8000c16:	0c1c      	lsrs	r4, r3, #16
 8000c18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c20:	42a5      	cmp	r5, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	fa00 f001 	lsl.w	r0, r0, r1
 8000c2a:	d90b      	bls.n	8000c44 <__udivmoddi4+0x1b0>
 8000c2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c34:	f080 8088 	bcs.w	8000d48 <__udivmoddi4+0x2b4>
 8000c38:	42a5      	cmp	r5, r4
 8000c3a:	f240 8085 	bls.w	8000d48 <__udivmoddi4+0x2b4>
 8000c3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c42:	4464      	add	r4, ip
 8000c44:	1b64      	subs	r4, r4, r5
 8000c46:	b29d      	uxth	r5, r3
 8000c48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c58:	45a6      	cmp	lr, r4
 8000c5a:	d908      	bls.n	8000c6e <__udivmoddi4+0x1da>
 8000c5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c64:	d26c      	bcs.n	8000d40 <__udivmoddi4+0x2ac>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	d96a      	bls.n	8000d40 <__udivmoddi4+0x2ac>
 8000c6a:	3b02      	subs	r3, #2
 8000c6c:	4464      	add	r4, ip
 8000c6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c72:	fba3 9502 	umull	r9, r5, r3, r2
 8000c76:	eba4 040e 	sub.w	r4, r4, lr
 8000c7a:	42ac      	cmp	r4, r5
 8000c7c:	46c8      	mov	r8, r9
 8000c7e:	46ae      	mov	lr, r5
 8000c80:	d356      	bcc.n	8000d30 <__udivmoddi4+0x29c>
 8000c82:	d053      	beq.n	8000d2c <__udivmoddi4+0x298>
 8000c84:	b156      	cbz	r6, 8000c9c <__udivmoddi4+0x208>
 8000c86:	ebb0 0208 	subs.w	r2, r0, r8
 8000c8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000c92:	40ca      	lsrs	r2, r1
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	4317      	orrs	r7, r2
 8000c98:	e9c6 7400 	strd	r7, r4, [r6]
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	f1c3 0120 	rsb	r1, r3, #32
 8000ca8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cac:	fa20 f201 	lsr.w	r2, r0, r1
 8000cb0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cb4:	409d      	lsls	r5, r3
 8000cb6:	432a      	orrs	r2, r5
 8000cb8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbc:	fa1f fe8c 	uxth.w	lr, ip
 8000cc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc8:	0c11      	lsrs	r1, r2, #16
 8000cca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cce:	fb00 f50e 	mul.w	r5, r0, lr
 8000cd2:	428d      	cmp	r5, r1
 8000cd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x258>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ce2:	d22f      	bcs.n	8000d44 <__udivmoddi4+0x2b0>
 8000ce4:	428d      	cmp	r5, r1
 8000ce6:	d92d      	bls.n	8000d44 <__udivmoddi4+0x2b0>
 8000ce8:	3802      	subs	r0, #2
 8000cea:	4461      	add	r1, ip
 8000cec:	1b49      	subs	r1, r1, r5
 8000cee:	b292      	uxth	r2, r2
 8000cf0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cf4:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000d00:	4291      	cmp	r1, r2
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x282>
 8000d04:	eb1c 0202 	adds.w	r2, ip, r2
 8000d08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d0c:	d216      	bcs.n	8000d3c <__udivmoddi4+0x2a8>
 8000d0e:	4291      	cmp	r1, r2
 8000d10:	d914      	bls.n	8000d3c <__udivmoddi4+0x2a8>
 8000d12:	3d02      	subs	r5, #2
 8000d14:	4462      	add	r2, ip
 8000d16:	1a52      	subs	r2, r2, r1
 8000d18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d1c:	e738      	b.n	8000b90 <__udivmoddi4+0xfc>
 8000d1e:	4631      	mov	r1, r6
 8000d20:	4630      	mov	r0, r6
 8000d22:	e708      	b.n	8000b36 <__udivmoddi4+0xa2>
 8000d24:	4639      	mov	r1, r7
 8000d26:	e6e6      	b.n	8000af6 <__udivmoddi4+0x62>
 8000d28:	4610      	mov	r0, r2
 8000d2a:	e6fb      	b.n	8000b24 <__udivmoddi4+0x90>
 8000d2c:	4548      	cmp	r0, r9
 8000d2e:	d2a9      	bcs.n	8000c84 <__udivmoddi4+0x1f0>
 8000d30:	ebb9 0802 	subs.w	r8, r9, r2
 8000d34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d38:	3b01      	subs	r3, #1
 8000d3a:	e7a3      	b.n	8000c84 <__udivmoddi4+0x1f0>
 8000d3c:	4645      	mov	r5, r8
 8000d3e:	e7ea      	b.n	8000d16 <__udivmoddi4+0x282>
 8000d40:	462b      	mov	r3, r5
 8000d42:	e794      	b.n	8000c6e <__udivmoddi4+0x1da>
 8000d44:	4640      	mov	r0, r8
 8000d46:	e7d1      	b.n	8000cec <__udivmoddi4+0x258>
 8000d48:	46d0      	mov	r8, sl
 8000d4a:	e77b      	b.n	8000c44 <__udivmoddi4+0x1b0>
 8000d4c:	3d02      	subs	r5, #2
 8000d4e:	4462      	add	r2, ip
 8000d50:	e732      	b.n	8000bb8 <__udivmoddi4+0x124>
 8000d52:	4608      	mov	r0, r1
 8000d54:	e70a      	b.n	8000b6c <__udivmoddi4+0xd8>
 8000d56:	4464      	add	r4, ip
 8000d58:	3802      	subs	r0, #2
 8000d5a:	e742      	b.n	8000be2 <__udivmoddi4+0x14e>

08000d5c <__aeabi_idiv0>:
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <I2C_Read_Register>:
#include "BMP280.h"

uint8_t BMP280_DEV_ID   =   0xEE;

uint8_t I2C_Read_Register(bmp280_t *bmp280, uint8_t device_adr,
		uint8_t internal_adr) {
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af02      	add	r7, sp, #8
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
 8000d6c:	4613      	mov	r3, r2
 8000d6e:	70bb      	strb	r3, [r7, #2]

	uint8_t tx_buff[1];
	uint8_t rx_buff[1];

	tx_buff[0] = internal_adr;
 8000d70:	78bb      	ldrb	r3, [r7, #2]
 8000d72:	733b      	strb	r3, [r7, #12]

	HAL_I2C_Master_Transmit(bmp280->hi2c, device_adr, &tx_buff[0], 1, 10000);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	78fb      	ldrb	r3, [r7, #3]
 8000d7a:	b299      	uxth	r1, r3
 8000d7c:	f107 020c 	add.w	r2, r7, #12
 8000d80:	f242 7310 	movw	r3, #10000	; 0x2710
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	f001 fb6e 	bl	8002468 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(bmp280->hi2c, device_adr + 1, &rx_buff[0], 1, 10000);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	3301      	adds	r3, #1
 8000d96:	b299      	uxth	r1, r3
 8000d98:	f107 0208 	add.w	r2, r7, #8
 8000d9c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000da0:	9300      	str	r3, [sp, #0]
 8000da2:	2301      	movs	r3, #1
 8000da4:	f001 fc5e 	bl	8002664 <HAL_I2C_Master_Receive>

	return rx_buff[0];
 8000da8:	7a3b      	ldrb	r3, [r7, #8]
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3710      	adds	r7, #16
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <I2C_Write_Register>:

void I2C_Write_Register(bmp280_t *bmp280, uint8_t device_adr,
		uint8_t internal_adr, uint8_t data) {
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b086      	sub	sp, #24
 8000db6:	af02      	add	r7, sp, #8
 8000db8:	6078      	str	r0, [r7, #4]
 8000dba:	4608      	mov	r0, r1
 8000dbc:	4611      	mov	r1, r2
 8000dbe:	461a      	mov	r2, r3
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	70fb      	strb	r3, [r7, #3]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70bb      	strb	r3, [r7, #2]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	707b      	strb	r3, [r7, #1]
	uint8_t tx_buff[2];

	tx_buff[0] = internal_adr;
 8000dcc:	78bb      	ldrb	r3, [r7, #2]
 8000dce:	733b      	strb	r3, [r7, #12]
	tx_buff[1] = data;
 8000dd0:	787b      	ldrb	r3, [r7, #1]
 8000dd2:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(bmp280->hi2c, device_adr, tx_buff, 2, 10000);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	6818      	ldr	r0, [r3, #0]
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	b299      	uxth	r1, r3
 8000ddc:	f107 020c 	add.w	r2, r7, #12
 8000de0:	f242 7310 	movw	r3, #10000	; 0x2710
 8000de4:	9300      	str	r3, [sp, #0]
 8000de6:	2302      	movs	r3, #2
 8000de8:	f001 fb3e 	bl	8002468 <HAL_I2C_Master_Transmit>
}
 8000dec:	bf00      	nop
 8000dee:	3710      	adds	r7, #16
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <BMP280_Calibration>:

void BMP280_Calibration(bmp280_t *bmp280) {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08c      	sub	sp, #48	; 0x30
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	6078      	str	r0, [r7, #4]
	uint8_t CALIB_START_ADRESS = 0x88;
 8000dfc:	2388      	movs	r3, #136	; 0x88
 8000dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	uint8_t rx_buff[24];

	HAL_I2C_Master_Transmit(bmp280->hi2c, BMP280_DEV_ID, &CALIB_START_ADRESS, 1,
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6818      	ldr	r0, [r3, #0]
 8000e06:	4b52      	ldr	r3, [pc, #328]	; (8000f50 <BMP280_Calibration+0x15c>)
 8000e08:	781b      	ldrb	r3, [r3, #0]
 8000e0a:	b299      	uxth	r1, r3
 8000e0c:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8000e10:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	2301      	movs	r3, #1
 8000e18:	f001 fb26 	bl	8002468 <HAL_I2C_Master_Transmit>
			10000);
	HAL_I2C_Master_Receive(bmp280->hi2c, BMP280_DEV_ID + 1, &rx_buff[0], 24,
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6818      	ldr	r0, [r3, #0]
 8000e20:	4b4b      	ldr	r3, [pc, #300]	; (8000f50 <BMP280_Calibration+0x15c>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3301      	adds	r3, #1
 8000e28:	b299      	uxth	r1, r3
 8000e2a:	f107 020c 	add.w	r2, r7, #12
 8000e2e:	f242 7310 	movw	r3, #10000	; 0x2710
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	2318      	movs	r3, #24
 8000e36:	f001 fc15 	bl	8002664 <HAL_I2C_Master_Receive>
			10000);

	bmp280->reg_T1 = (rx_buff[0]) + (rx_buff[1] << 8);
 8000e3a:	7b3b      	ldrb	r3, [r7, #12]
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	7b7b      	ldrb	r3, [r7, #13]
 8000e40:	b29b      	uxth	r3, r3
 8000e42:	021b      	lsls	r3, r3, #8
 8000e44:	b29b      	uxth	r3, r3
 8000e46:	4413      	add	r3, r2
 8000e48:	b29a      	uxth	r2, r3
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	819a      	strh	r2, [r3, #12]
	bmp280->reg_T2 = (rx_buff[2]) + (rx_buff[3] << 8);
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	b29a      	uxth	r2, r3
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	021b      	lsls	r3, r3, #8
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	4413      	add	r3, r2
 8000e5c:	b29b      	uxth	r3, r3
 8000e5e:	b21a      	sxth	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	821a      	strh	r2, [r3, #16]
	bmp280->reg_T3 = (rx_buff[4]) + (rx_buff[5] << 8);
 8000e64:	7c3b      	ldrb	r3, [r7, #16]
 8000e66:	b29a      	uxth	r2, r3
 8000e68:	7c7b      	ldrb	r3, [r7, #17]
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	021b      	lsls	r3, r3, #8
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	4413      	add	r3, r2
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	b21a      	sxth	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	825a      	strh	r2, [r3, #18]
	bmp280->reg_P1 = (rx_buff[6]) + (rx_buff[7] << 8);
 8000e7a:	7cbb      	ldrb	r3, [r7, #18]
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	7cfb      	ldrb	r3, [r7, #19]
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	021b      	lsls	r3, r3, #8
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	4413      	add	r3, r2
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	81da      	strh	r2, [r3, #14]
	bmp280->reg_P2 = (rx_buff[8]) + (rx_buff[9] << 8);
 8000e8e:	7d3b      	ldrb	r3, [r7, #20]
 8000e90:	b29a      	uxth	r2, r3
 8000e92:	7d7b      	ldrb	r3, [r7, #21]
 8000e94:	b29b      	uxth	r3, r3
 8000e96:	021b      	lsls	r3, r3, #8
 8000e98:	b29b      	uxth	r3, r3
 8000e9a:	4413      	add	r3, r2
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	b21a      	sxth	r2, r3
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	829a      	strh	r2, [r3, #20]
	bmp280->reg_P3 = (rx_buff[10]) + (rx_buff[11] << 8);
 8000ea4:	7dbb      	ldrb	r3, [r7, #22]
 8000ea6:	b29a      	uxth	r2, r3
 8000ea8:	7dfb      	ldrb	r3, [r7, #23]
 8000eaa:	b29b      	uxth	r3, r3
 8000eac:	021b      	lsls	r3, r3, #8
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	b21a      	sxth	r2, r3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	82da      	strh	r2, [r3, #22]
	bmp280->reg_P4 = (rx_buff[12]) + (rx_buff[13] << 8);
 8000eba:	7e3b      	ldrb	r3, [r7, #24]
 8000ebc:	b29a      	uxth	r2, r3
 8000ebe:	7e7b      	ldrb	r3, [r7, #25]
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	021b      	lsls	r3, r3, #8
 8000ec4:	b29b      	uxth	r3, r3
 8000ec6:	4413      	add	r3, r2
 8000ec8:	b29b      	uxth	r3, r3
 8000eca:	b21a      	sxth	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	831a      	strh	r2, [r3, #24]
	bmp280->reg_P5 = (rx_buff[14]) + (rx_buff[15] << 8);
 8000ed0:	7ebb      	ldrb	r3, [r7, #26]
 8000ed2:	b29a      	uxth	r2, r3
 8000ed4:	7efb      	ldrb	r3, [r7, #27]
 8000ed6:	b29b      	uxth	r3, r3
 8000ed8:	021b      	lsls	r3, r3, #8
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	4413      	add	r3, r2
 8000ede:	b29b      	uxth	r3, r3
 8000ee0:	b21a      	sxth	r2, r3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	835a      	strh	r2, [r3, #26]
	bmp280->reg_P6 = (rx_buff[16]) + (rx_buff[17] << 8);
 8000ee6:	7f3b      	ldrb	r3, [r7, #28]
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	7f7b      	ldrb	r3, [r7, #29]
 8000eec:	b29b      	uxth	r3, r3
 8000eee:	021b      	lsls	r3, r3, #8
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b29b      	uxth	r3, r3
 8000ef6:	b21a      	sxth	r2, r3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	839a      	strh	r2, [r3, #28]
	bmp280->reg_P7 = (rx_buff[18]) + (rx_buff[19] << 8);
 8000efc:	7fbb      	ldrb	r3, [r7, #30]
 8000efe:	b29a      	uxth	r2, r3
 8000f00:	7ffb      	ldrb	r3, [r7, #31]
 8000f02:	b29b      	uxth	r3, r3
 8000f04:	021b      	lsls	r3, r3, #8
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4413      	add	r3, r2
 8000f0a:	b29b      	uxth	r3, r3
 8000f0c:	b21a      	sxth	r2, r3
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	83da      	strh	r2, [r3, #30]
	bmp280->reg_P8 = (rx_buff[20]) + (rx_buff[21] << 8);
 8000f12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	021b      	lsls	r3, r3, #8
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	4413      	add	r3, r2
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	841a      	strh	r2, [r3, #32]
	bmp280->reg_P9 = (rx_buff[22]) + (rx_buff[23] << 8);
 8000f2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	021b      	lsls	r3, r3, #8
 8000f3a:	b29b      	uxth	r3, r3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	b29b      	uxth	r3, r3
 8000f40:	b21a      	sxth	r2, r3
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	845a      	strh	r2, [r3, #34]	; 0x22

}
 8000f46:	bf00      	nop
 8000f48:	3728      	adds	r7, #40	; 0x28
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	20000000 	.word	0x20000000

08000f54 <BMP280_Init>:

void BMP280_Init(bmp280_t *bmp280, uint8_t F4, uint8_t F5,
		I2C_HandleTypeDef *hi2c) {
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	607b      	str	r3, [r7, #4]
 8000f5e:	460b      	mov	r3, r1
 8000f60:	72fb      	strb	r3, [r7, #11]
 8000f62:	4613      	mov	r3, r2
 8000f64:	72bb      	strb	r3, [r7, #10]

	bmp280->hi2c = hi2c;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	601a      	str	r2, [r3, #0]

	I2C_Write_Register(bmp280,BMP280_DEV_ID, 0xF4, F4); // osrs_t 010 x2, osrs_p 16 101, mode normal 11
 8000f6c:	4b08      	ldr	r3, [pc, #32]	; (8000f90 <BMP280_Init+0x3c>)
 8000f6e:	7819      	ldrb	r1, [r3, #0]
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	22f4      	movs	r2, #244	; 0xf4
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff ff1c 	bl	8000db2 <I2C_Write_Register>
	I2C_Write_Register(bmp280,BMP280_DEV_ID, 0xF5, F5); // standby time 500ms 100, filter 16 100, SPI DIS 0
 8000f7a:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <BMP280_Init+0x3c>)
 8000f7c:	7819      	ldrb	r1, [r3, #0]
 8000f7e:	7abb      	ldrb	r3, [r7, #10]
 8000f80:	22f5      	movs	r2, #245	; 0xf5
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff ff15 	bl	8000db2 <I2C_Write_Register>

}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	20000000 	.word	0x20000000
 8000f94:	00000000 	.word	0x00000000

08000f98 <BMP280_Read_All>:

void BMP280_Read_All(bmp280_t *bmp280) {
 8000f98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000f9c:	b096      	sub	sp, #88	; 0x58
 8000f9e:	af02      	add	r7, sp, #8
 8000fa0:	6078      	str	r0, [r7, #4]
	uint8_t status, rx_buff[6];
	uint8_t READ_START_ADRESS  = 0xF7;
 8000fa2:	23f7      	movs	r3, #247	; 0xf7
 8000fa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	do {
		status = I2C_Read_Register(bmp280,BMP280_DEV_ID, 0xF3);
 8000fa8:	4bca      	ldr	r3, [pc, #808]	; (80012d4 <BMP280_Read_All+0x33c>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	22f3      	movs	r2, #243	; 0xf3
 8000fae:	4619      	mov	r1, r3
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff fed5 	bl	8000d60 <I2C_Read_Register>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	} while (((status & 0b00001000) == 8) || ((status & 0b00000001) == 1));
 8000fbc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fc0:	f003 0308 	and.w	r3, r3, #8
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1ef      	bne.n	8000fa8 <BMP280_Read_All+0x10>
 8000fc8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1e9      	bne.n	8000fa8 <BMP280_Read_All+0x10>

	HAL_I2C_Master_Transmit(bmp280->hi2c, BMP280_DEV_ID, &READ_START_ADRESS, 1,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6818      	ldr	r0, [r3, #0]
 8000fd8:	4bbe      	ldr	r3, [pc, #760]	; (80012d4 <BMP280_Read_All+0x33c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b299      	uxth	r1, r3
 8000fde:	f107 0227 	add.w	r2, r7, #39	; 0x27
 8000fe2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fe6:	9300      	str	r3, [sp, #0]
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f001 fa3d 	bl	8002468 <HAL_I2C_Master_Transmit>
			10000);
	HAL_I2C_Master_Receive(bmp280->hi2c, BMP280_DEV_ID + 1, &rx_buff[0], 6,
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	4bb8      	ldr	r3, [pc, #736]	; (80012d4 <BMP280_Read_All+0x33c>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	b29b      	uxth	r3, r3
 8000ff8:	3301      	adds	r3, #1
 8000ffa:	b299      	uxth	r1, r3
 8000ffc:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001000:	f242 7310 	movw	r3, #10000	; 0x2710
 8001004:	9300      	str	r3, [sp, #0]
 8001006:	2306      	movs	r3, #6
 8001008:	f001 fb2c 	bl	8002664 <HAL_I2C_Master_Receive>
			10000);

	volatile uint32_t temp[3];
	temp[2] = rx_buff[3];
 800100c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001010:	623b      	str	r3, [r7, #32]
	temp[1] = rx_buff[4];
 8001012:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001016:	61fb      	str	r3, [r7, #28]
	temp[0] = rx_buff[5];
 8001018:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800101c:	61bb      	str	r3, [r7, #24]
	bmp280->temperature_raw = (temp[2] << 12) + (temp[1] << 4) + (temp[0] >> 4);
 800101e:	6a3b      	ldr	r3, [r7, #32]
 8001020:	031a      	lsls	r2, r3, #12
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	011b      	lsls	r3, r3, #4
 8001026:	441a      	add	r2, r3
 8001028:	69bb      	ldr	r3, [r7, #24]
 800102a:	091b      	lsrs	r3, r3, #4
 800102c:	4413      	add	r3, r2
 800102e:	461a      	mov	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	605a      	str	r2, [r3, #4]

	temp[2] = rx_buff[0];
 8001034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001038:	623b      	str	r3, [r7, #32]
	temp[1] = rx_buff[1];
 800103a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800103e:	61fb      	str	r3, [r7, #28]
	temp[0] = rx_buff[2];
 8001040:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8001044:	61bb      	str	r3, [r7, #24]
	bmp280->pressure_raw = (temp[2] << 12) + (temp[1] << 4) + (temp[0] >> 4);
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	031a      	lsls	r2, r3, #12
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	011b      	lsls	r3, r3, #4
 800104e:	441a      	add	r2, r3
 8001050:	69bb      	ldr	r3, [r7, #24]
 8001052:	091b      	lsrs	r3, r3, #4
 8001054:	4413      	add	r3, r2
 8001056:	461a      	mov	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	609a      	str	r2, [r3, #8]

	double var1, var2;
	var1 = (((double) bmp280->temperature_raw ) / 16384.0 - ((double) bmp280->reg_T1) / 1024.0)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fa0b 	bl	800047c <__aeabi_i2d>
 8001066:	f04f 0200 	mov.w	r2, #0
 800106a:	4b9b      	ldr	r3, [pc, #620]	; (80012d8 <BMP280_Read_All+0x340>)
 800106c:	f7ff fb9a 	bl	80007a4 <__aeabi_ddiv>
 8001070:	4602      	mov	r2, r0
 8001072:	460b      	mov	r3, r1
 8001074:	4614      	mov	r4, r2
 8001076:	461d      	mov	r5, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	899b      	ldrh	r3, [r3, #12]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff f9ed 	bl	800045c <__aeabi_ui2d>
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	4b95      	ldr	r3, [pc, #596]	; (80012dc <BMP280_Read_All+0x344>)
 8001088:	f7ff fb8c 	bl	80007a4 <__aeabi_ddiv>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4620      	mov	r0, r4
 8001092:	4629      	mov	r1, r5
 8001094:	f7ff f8a4 	bl	80001e0 <__aeabi_dsub>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4614      	mov	r4, r2
 800109e:	461d      	mov	r5, r3
			* ((double) bmp280->reg_T2);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f9e8 	bl	800047c <__aeabi_i2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
	var1 = (((double) bmp280->temperature_raw ) / 16384.0 - ((double) bmp280->reg_T1) / 1024.0)
 80010b0:	4620      	mov	r0, r4
 80010b2:	4629      	mov	r1, r5
 80010b4:	f7ff fa4c 	bl	8000550 <__aeabi_dmul>
 80010b8:	4602      	mov	r2, r0
 80010ba:	460b      	mov	r3, r1
 80010bc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	var2 = ((((double) bmp280->temperature_raw) / 131072.0 - ((double) bmp280->reg_T1) / 8192.0)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff f9d9 	bl	800047c <__aeabi_i2d>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 80010d2:	f7ff fb67 	bl	80007a4 <__aeabi_ddiv>
 80010d6:	4602      	mov	r2, r0
 80010d8:	460b      	mov	r3, r1
 80010da:	4614      	mov	r4, r2
 80010dc:	461d      	mov	r5, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	899b      	ldrh	r3, [r3, #12]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff f9ba 	bl	800045c <__aeabi_ui2d>
 80010e8:	f04f 0200 	mov.w	r2, #0
 80010ec:	4b7c      	ldr	r3, [pc, #496]	; (80012e0 <BMP280_Read_All+0x348>)
 80010ee:	f7ff fb59 	bl	80007a4 <__aeabi_ddiv>
 80010f2:	4602      	mov	r2, r0
 80010f4:	460b      	mov	r3, r1
 80010f6:	4620      	mov	r0, r4
 80010f8:	4629      	mov	r1, r5
 80010fa:	f7ff f871 	bl	80001e0 <__aeabi_dsub>
 80010fe:	4602      	mov	r2, r0
 8001100:	460b      	mov	r3, r1
 8001102:	4614      	mov	r4, r2
 8001104:	461d      	mov	r5, r3
			* (((double) bmp280->temperature_raw) / 131072.0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff f9b6 	bl	800047c <__aeabi_i2d>
 8001110:	f04f 0200 	mov.w	r2, #0
 8001114:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8001118:	f7ff fb44 	bl	80007a4 <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	4690      	mov	r8, r2
 8001122:	4699      	mov	r9, r3
					- ((double) bmp280->reg_T1) / 8192.0)) * ((double) bmp280->reg_T3);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	899b      	ldrh	r3, [r3, #12]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff f997 	bl	800045c <__aeabi_ui2d>
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	4b6b      	ldr	r3, [pc, #428]	; (80012e0 <BMP280_Read_All+0x348>)
 8001134:	f7ff fb36 	bl	80007a4 <__aeabi_ddiv>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	4640      	mov	r0, r8
 800113e:	4649      	mov	r1, r9
 8001140:	f7ff f84e 	bl	80001e0 <__aeabi_dsub>
 8001144:	4602      	mov	r2, r0
 8001146:	460b      	mov	r3, r1
			* (((double) bmp280->temperature_raw) / 131072.0
 8001148:	4620      	mov	r0, r4
 800114a:	4629      	mov	r1, r5
 800114c:	f7ff fa00 	bl	8000550 <__aeabi_dmul>
 8001150:	4602      	mov	r2, r0
 8001152:	460b      	mov	r3, r1
 8001154:	4614      	mov	r4, r2
 8001156:	461d      	mov	r5, r3
					- ((double) bmp280->reg_T1) / 8192.0)) * ((double) bmp280->reg_T3);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff f98c 	bl	800047c <__aeabi_i2d>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
	var2 = ((((double) bmp280->temperature_raw) / 131072.0 - ((double) bmp280->reg_T1) / 8192.0)
 8001168:	4620      	mov	r0, r4
 800116a:	4629      	mov	r1, r5
 800116c:	f7ff f9f0 	bl	8000550 <__aeabi_dmul>
 8001170:	4602      	mov	r2, r0
 8001172:	460b      	mov	r3, r1
 8001174:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

	double t_fine = (int32_t) (var1 + var2);
 8001178:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800117c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001180:	f7ff f830 	bl	80001e4 <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fbf2 	bl	8000974 <__aeabi_d2iz>
 8001190:	4603      	mov	r3, r0
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff f972 	bl	800047c <__aeabi_i2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	volatile float T = (var1 + var2) / 5120.0;
 80011a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80011a4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80011a8:	f7ff f81c 	bl	80001e4 <__adddf3>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4610      	mov	r0, r2
 80011b2:	4619      	mov	r1, r3
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	4b4a      	ldr	r3, [pc, #296]	; (80012e4 <BMP280_Read_All+0x34c>)
 80011ba:	f7ff faf3 	bl	80007a4 <__aeabi_ddiv>
 80011be:	4602      	mov	r2, r0
 80011c0:	460b      	mov	r3, r1
 80011c2:	4610      	mov	r0, r2
 80011c4:	4619      	mov	r1, r3
 80011c6:	f7ff fbfd 	bl	80009c4 <__aeabi_d2f>
 80011ca:	4603      	mov	r3, r0
 80011cc:	617b      	str	r3, [r7, #20]

	var1 = ((double) t_fine / 2.0) - 64000.0;
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80011d6:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80011da:	f7ff fae3 	bl	80007a4 <__aeabi_ddiv>
 80011de:	4602      	mov	r2, r0
 80011e0:	460b      	mov	r3, r1
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f04f 0200 	mov.w	r2, #0
 80011ea:	4b3f      	ldr	r3, [pc, #252]	; (80012e8 <BMP280_Read_All+0x350>)
 80011ec:	f7fe fff8 	bl	80001e0 <__aeabi_dsub>
 80011f0:	4602      	mov	r2, r0
 80011f2:	460b      	mov	r3, r1
 80011f4:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	var2 = var1 * var1 * ((double) bmp280->reg_P6) / 32768.0;
 80011f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80011fc:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001200:	f7ff f9a6 	bl	8000550 <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4614      	mov	r4, r2
 800120a:	461d      	mov	r5, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff f932 	bl	800047c <__aeabi_i2d>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4620      	mov	r0, r4
 800121e:	4629      	mov	r1, r5
 8001220:	f7ff f996 	bl	8000550 <__aeabi_dmul>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	4610      	mov	r0, r2
 800122a:	4619      	mov	r1, r3
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b2e      	ldr	r3, [pc, #184]	; (80012ec <BMP280_Read_All+0x354>)
 8001232:	f7ff fab7 	bl	80007a4 <__aeabi_ddiv>
 8001236:	4602      	mov	r2, r0
 8001238:	460b      	mov	r3, r1
 800123a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = var2 + var1 * ((double) bmp280->reg_P5) * 2.0;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f919 	bl	800047c <__aeabi_i2d>
 800124a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800124e:	f7ff f97f 	bl	8000550 <__aeabi_dmul>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	4610      	mov	r0, r2
 8001258:	4619      	mov	r1, r3
 800125a:	4602      	mov	r2, r0
 800125c:	460b      	mov	r3, r1
 800125e:	f7fe ffc1 	bl	80001e4 <__adddf3>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800126a:	f7fe ffbb 	bl	80001e4 <__adddf3>
 800126e:	4602      	mov	r2, r0
 8001270:	460b      	mov	r3, r1
 8001272:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var2 = (var2 / 4.0) + (((double) bmp280->reg_P4) * 65536.0);
 8001276:	f04f 0200 	mov.w	r2, #0
 800127a:	4b1d      	ldr	r3, [pc, #116]	; (80012f0 <BMP280_Read_All+0x358>)
 800127c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8001280:	f7ff fa90 	bl	80007a4 <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4614      	mov	r4, r2
 800128a:	461d      	mov	r5, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001292:	4618      	mov	r0, r3
 8001294:	f7ff f8f2 	bl	800047c <__aeabi_i2d>
 8001298:	f04f 0200 	mov.w	r2, #0
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <BMP280_Read_All+0x35c>)
 800129e:	f7ff f957 	bl	8000550 <__aeabi_dmul>
 80012a2:	4602      	mov	r2, r0
 80012a4:	460b      	mov	r3, r1
 80012a6:	4620      	mov	r0, r4
 80012a8:	4629      	mov	r1, r5
 80012aa:	f7fe ff9b 	bl	80001e4 <__adddf3>
 80012ae:	4602      	mov	r2, r0
 80012b0:	460b      	mov	r3, r1
 80012b2:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	var1 = (((double) bmp280->reg_P3) * var1 * var1 / 524288.0
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f8dd 	bl	800047c <__aeabi_i2d>
 80012c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012c6:	f7ff f943 	bl	8000550 <__aeabi_dmul>
 80012ca:	4602      	mov	r2, r0
 80012cc:	460b      	mov	r3, r1
 80012ce:	4610      	mov	r0, r2
 80012d0:	4619      	mov	r1, r3
 80012d2:	e011      	b.n	80012f8 <BMP280_Read_All+0x360>
 80012d4:	20000000 	.word	0x20000000
 80012d8:	40d00000 	.word	0x40d00000
 80012dc:	40900000 	.word	0x40900000
 80012e0:	40c00000 	.word	0x40c00000
 80012e4:	40b40000 	.word	0x40b40000
 80012e8:	40ef4000 	.word	0x40ef4000
 80012ec:	40e00000 	.word	0x40e00000
 80012f0:	40100000 	.word	0x40100000
 80012f4:	40f00000 	.word	0x40f00000
 80012f8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80012fc:	f7ff f928 	bl	8000550 <__aeabi_dmul>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f04f 0200 	mov.w	r2, #0
 800130c:	4b86      	ldr	r3, [pc, #536]	; (8001528 <BMP280_Read_All+0x590>)
 800130e:	f7ff fa49 	bl	80007a4 <__aeabi_ddiv>
 8001312:	4602      	mov	r2, r0
 8001314:	460b      	mov	r3, r1
 8001316:	4614      	mov	r4, r2
 8001318:	461d      	mov	r5, r3
			+ ((double) bmp280->reg_P2) * var1) / 524288.0;
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f8ab 	bl	800047c <__aeabi_i2d>
 8001326:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800132a:	f7ff f911 	bl	8000550 <__aeabi_dmul>
 800132e:	4602      	mov	r2, r0
 8001330:	460b      	mov	r3, r1
 8001332:	4620      	mov	r0, r4
 8001334:	4629      	mov	r1, r5
 8001336:	f7fe ff55 	bl	80001e4 <__adddf3>
 800133a:	4602      	mov	r2, r0
 800133c:	460b      	mov	r3, r1
 800133e:	4610      	mov	r0, r2
 8001340:	4619      	mov	r1, r3
	var1 = (((double) bmp280->reg_P3) * var1 * var1 / 524288.0
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	4b78      	ldr	r3, [pc, #480]	; (8001528 <BMP280_Read_All+0x590>)
 8001348:	f7ff fa2c 	bl	80007a4 <__aeabi_ddiv>
 800134c:	4602      	mov	r2, r0
 800134e:	460b      	mov	r3, r1
 8001350:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	var1 = (1.0 + var1 / 32768.0) * ((double) bmp280->reg_P1);
 8001354:	f04f 0200 	mov.w	r2, #0
 8001358:	4b74      	ldr	r3, [pc, #464]	; (800152c <BMP280_Read_All+0x594>)
 800135a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800135e:	f7ff fa21 	bl	80007a4 <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b70      	ldr	r3, [pc, #448]	; (8001530 <BMP280_Read_All+0x598>)
 8001370:	f7fe ff38 	bl	80001e4 <__adddf3>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4614      	mov	r4, r2
 800137a:	461d      	mov	r5, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	89db      	ldrh	r3, [r3, #14]
 8001380:	4618      	mov	r0, r3
 8001382:	f7ff f86b 	bl	800045c <__aeabi_ui2d>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4620      	mov	r0, r4
 800138c:	4629      	mov	r1, r5
 800138e:	f7ff f8df 	bl	8000550 <__aeabi_dmul>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	volatile double p = 1048576.0 - (double) bmp280->pressure_raw;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f86c 	bl	800047c <__aeabi_i2d>
 80013a4:	4602      	mov	r2, r0
 80013a6:	460b      	mov	r3, r1
 80013a8:	f04f 0000 	mov.w	r0, #0
 80013ac:	4961      	ldr	r1, [pc, #388]	; (8001534 <BMP280_Read_All+0x59c>)
 80013ae:	f7fe ff17 	bl	80001e0 <__aeabi_dsub>
 80013b2:	4602      	mov	r2, r0
 80013b4:	460b      	mov	r3, r1
 80013b6:	e9c7 2302 	strd	r2, r3, [r7, #8]
	p = (p - (var2 / 4096.0)) * 6250.0 / var1;
 80013ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013be:	f04f 0200 	mov.w	r2, #0
 80013c2:	4b5d      	ldr	r3, [pc, #372]	; (8001538 <BMP280_Read_All+0x5a0>)
 80013c4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80013c8:	f7ff f9ec 	bl	80007a4 <__aeabi_ddiv>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4620      	mov	r0, r4
 80013d2:	4629      	mov	r1, r5
 80013d4:	f7fe ff04 	bl	80001e0 <__aeabi_dsub>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	a34f      	add	r3, pc, #316	; (adr r3, 8001520 <BMP280_Read_All+0x588>)
 80013e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e6:	f7ff f8b3 	bl	8000550 <__aeabi_dmul>
 80013ea:	4602      	mov	r2, r0
 80013ec:	460b      	mov	r3, r1
 80013ee:	4610      	mov	r0, r2
 80013f0:	4619      	mov	r1, r3
 80013f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80013f6:	f7ff f9d5 	bl	80007a4 <__aeabi_ddiv>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	e9c7 2302 	strd	r2, r3, [r7, #8]
	var1 = ((double) bmp280->reg_P9) * p * p / 2147483648.0;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff f837 	bl	800047c <__aeabi_i2d>
 800140e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001412:	f7ff f89d 	bl	8000550 <__aeabi_dmul>
 8001416:	4602      	mov	r2, r0
 8001418:	460b      	mov	r3, r1
 800141a:	4610      	mov	r0, r2
 800141c:	4619      	mov	r1, r3
 800141e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001422:	f7ff f895 	bl	8000550 <__aeabi_dmul>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	4b42      	ldr	r3, [pc, #264]	; (800153c <BMP280_Read_All+0x5a4>)
 8001434:	f7ff f9b6 	bl	80007a4 <__aeabi_ddiv>
 8001438:	4602      	mov	r2, r0
 800143a:	460b      	mov	r3, r1
 800143c:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
	var2 = p * ((double) bmp280->reg_P8) / 32768.0;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f818 	bl	800047c <__aeabi_i2d>
 800144c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001450:	f7ff f87e 	bl	8000550 <__aeabi_dmul>
 8001454:	4602      	mov	r2, r0
 8001456:	460b      	mov	r3, r1
 8001458:	4610      	mov	r0, r2
 800145a:	4619      	mov	r1, r3
 800145c:	f04f 0200 	mov.w	r2, #0
 8001460:	4b32      	ldr	r3, [pc, #200]	; (800152c <BMP280_Read_All+0x594>)
 8001462:	f7ff f99f 	bl	80007a4 <__aeabi_ddiv>
 8001466:	4602      	mov	r2, r0
 8001468:	460b      	mov	r3, r1
 800146a:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	p = p + (var1 + var2 + ((double) bmp280->reg_P7)) / 16.0;
 800146e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001472:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001476:	f7fe feb5 	bl	80001e4 <__adddf3>
 800147a:	4602      	mov	r2, r0
 800147c:	460b      	mov	r3, r1
 800147e:	4614      	mov	r4, r2
 8001480:	461d      	mov	r5, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001488:	4618      	mov	r0, r3
 800148a:	f7fe fff7 	bl	800047c <__aeabi_i2d>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4620      	mov	r0, r4
 8001494:	4629      	mov	r1, r5
 8001496:	f7fe fea5 	bl	80001e4 <__adddf3>
 800149a:	4602      	mov	r2, r0
 800149c:	460b      	mov	r3, r1
 800149e:	4610      	mov	r0, r2
 80014a0:	4619      	mov	r1, r3
 80014a2:	f04f 0200 	mov.w	r2, #0
 80014a6:	4b26      	ldr	r3, [pc, #152]	; (8001540 <BMP280_Read_All+0x5a8>)
 80014a8:	f7ff f97c 	bl	80007a4 <__aeabi_ddiv>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	4610      	mov	r0, r2
 80014b2:	4619      	mov	r1, r3
 80014b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014b8:	f7fe fe94 	bl	80001e4 <__adddf3>
 80014bc:	4602      	mov	r2, r0
 80014be:	460b      	mov	r3, r1
 80014c0:	e9c7 2302 	strd	r2, r3, [r7, #8]

	bmp280->pressure = p;
 80014c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80014c8:	4610      	mov	r0, r2
 80014ca:	4619      	mov	r1, r3
 80014cc:	f7ff fa7a 	bl	80009c4 <__aeabi_d2f>
 80014d0:	4602      	mov	r2, r0
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	629a      	str	r2, [r3, #40]	; 0x28
	bmp280->temperature = T;
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	625a      	str	r2, [r3, #36]	; 0x24
	bmp280->altitude = 44330.0f*(1 - powf(bmp280->pressure/101325.0f,1.0f/5.255f));//altitude=((powf(101325.0/pressure, 1/5.257f)-1)*(temperature+273.15f))/0.0065f;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80014e2:	eddf 6a18 	vldr	s13, [pc, #96]	; 8001544 <BMP280_Read_All+0x5ac>
 80014e6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80014ea:	eddf 0a17 	vldr	s1, [pc, #92]	; 8001548 <BMP280_Read_All+0x5b0>
 80014ee:	eeb0 0a47 	vmov.f32	s0, s14
 80014f2:	f002 ff89 	bl	8004408 <powf>
 80014f6:	eef0 7a40 	vmov.f32	s15, s0
 80014fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001502:	ed9f 7a12 	vldr	s14, [pc, #72]	; 800154c <BMP280_Read_All+0x5b4>
 8001506:	ee67 7a87 	vmul.f32	s15, s15, s14
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

}
 8001510:	bf00      	nop
 8001512:	3750      	adds	r7, #80	; 0x50
 8001514:	46bd      	mov	sp, r7
 8001516:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800151a:	bf00      	nop
 800151c:	f3af 8000 	nop.w
 8001520:	00000000 	.word	0x00000000
 8001524:	40b86a00 	.word	0x40b86a00
 8001528:	41200000 	.word	0x41200000
 800152c:	40e00000 	.word	0x40e00000
 8001530:	3ff00000 	.word	0x3ff00000
 8001534:	41300000 	.word	0x41300000
 8001538:	40b00000 	.word	0x40b00000
 800153c:	41e00000 	.word	0x41e00000
 8001540:	40300000 	.word	0x40300000
 8001544:	47c5e680 	.word	0x47c5e680
 8001548:	3e42dcae 	.word	0x3e42dcae
 800154c:	472d2a00 	.word	0x472d2a00

08001550 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001550:	b480      	push	{r7}
 8001552:	b085      	sub	sp, #20
 8001554:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	4b17      	ldr	r3, [pc, #92]	; (80015b8 <MX_GPIO_Init+0x68>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a16      	ldr	r2, [pc, #88]	; (80015b8 <MX_GPIO_Init+0x68>)
 8001560:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <MX_GPIO_Init+0x68>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800156e:	60fb      	str	r3, [r7, #12]
 8001570:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <MX_GPIO_Init+0x68>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a0f      	ldr	r2, [pc, #60]	; (80015b8 <MX_GPIO_Init+0x68>)
 800157c:	f043 0301 	orr.w	r3, r3, #1
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <MX_GPIO_Init+0x68>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0301 	and.w	r3, r3, #1
 800158a:	60bb      	str	r3, [r7, #8]
 800158c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	4b09      	ldr	r3, [pc, #36]	; (80015b8 <MX_GPIO_Init+0x68>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a08      	ldr	r2, [pc, #32]	; (80015b8 <MX_GPIO_Init+0x68>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <MX_GPIO_Init+0x68>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	607b      	str	r3, [r7, #4]
 80015a8:	687b      	ldr	r3, [r7, #4]

}
 80015aa:	bf00      	nop
 80015ac:	3714      	adds	r7, #20
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800

080015bc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015c0:	4b12      	ldr	r3, [pc, #72]	; (800160c <MX_I2C1_Init+0x50>)
 80015c2:	4a13      	ldr	r2, [pc, #76]	; (8001610 <MX_I2C1_Init+0x54>)
 80015c4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <MX_I2C1_Init+0x50>)
 80015c8:	4a12      	ldr	r2, [pc, #72]	; (8001614 <MX_I2C1_Init+0x58>)
 80015ca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015cc:	4b0f      	ldr	r3, [pc, #60]	; (800160c <MX_I2C1_Init+0x50>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015d2:	4b0e      	ldr	r3, [pc, #56]	; (800160c <MX_I2C1_Init+0x50>)
 80015d4:	2200      	movs	r2, #0
 80015d6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015d8:	4b0c      	ldr	r3, [pc, #48]	; (800160c <MX_I2C1_Init+0x50>)
 80015da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015de:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e0:	4b0a      	ldr	r3, [pc, #40]	; (800160c <MX_I2C1_Init+0x50>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <MX_I2C1_Init+0x50>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015ec:	4b07      	ldr	r3, [pc, #28]	; (800160c <MX_I2C1_Init+0x50>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <MX_I2C1_Init+0x50>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015f8:	4804      	ldr	r0, [pc, #16]	; (800160c <MX_I2C1_Init+0x50>)
 80015fa:	f000 fdf1 	bl	80021e0 <HAL_I2C_Init>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001604:	f000 f9ce 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	bd80      	pop	{r7, pc}
 800160c:	2000007c 	.word	0x2000007c
 8001610:	40005400 	.word	0x40005400
 8001614:	000186a0 	.word	0x000186a0

08001618 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a19      	ldr	r2, [pc, #100]	; (800169c <HAL_I2C_MspInit+0x84>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d12b      	bne.n	8001692 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b18      	ldr	r3, [pc, #96]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a17      	ldr	r2, [pc, #92]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001656:	23c0      	movs	r3, #192	; 0xc0
 8001658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800165a:	2312      	movs	r3, #18
 800165c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001666:	2304      	movs	r3, #4
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166a:	f107 0314 	add.w	r3, r7, #20
 800166e:	4619      	mov	r1, r3
 8001670:	480c      	ldr	r0, [pc, #48]	; (80016a4 <HAL_I2C_MspInit+0x8c>)
 8001672:	f000 fc19 	bl	8001ea8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_I2C_MspInit+0x88>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001692:	bf00      	nop
 8001694:	3728      	adds	r7, #40	; 0x28
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40005400 	.word	0x40005400
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020400 	.word	0x40020400

080016a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016a8:	b5b0      	push	{r4, r5, r7, lr}
 80016aa:	ed2d 8b02 	vpush	{d8}
 80016ae:	b0c0      	sub	sp, #256	; 0x100
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016b2:	f000 fa7d 	bl	8001bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016b6:	f000 f90b 	bl	80018d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016ba:	f7ff ff49 	bl	8001550 <MX_GPIO_Init>
  MX_I2C1_Init();
 80016be:	f7ff ff7d 	bl	80015bc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80016c2:	f000 f9d9 	bl	8001a78 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  char string[256];


  HAL_Delay(2000);
 80016c6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016ca:	f000 fae3 	bl	8001c94 <HAL_Delay>
  BMP280_Init(&bmp280, F4_mode_normal, F5_t_sb_4sec, &hi2c1);
 80016ce:	4b75      	ldr	r3, [pc, #468]	; (80018a4 <main+0x1fc>)
 80016d0:	22e0      	movs	r2, #224	; 0xe0
 80016d2:	2103      	movs	r1, #3
 80016d4:	4874      	ldr	r0, [pc, #464]	; (80018a8 <main+0x200>)
 80016d6:	f7ff fc3d 	bl	8000f54 <BMP280_Init>
  BMP280_Calibration(&bmp280);
 80016da:	4873      	ldr	r0, [pc, #460]	; (80018a8 <main+0x200>)
 80016dc:	f7ff fb8a 	bl	8000df4 <BMP280_Calibration>
  BMP280_Read_All(&bmp280);
 80016e0:	4871      	ldr	r0, [pc, #452]	; (80018a8 <main+0x200>)
 80016e2:	f7ff fc59 	bl	8000f98 <BMP280_Read_All>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  BMP280_Read_All(&bmp280);
 80016e6:	4870      	ldr	r0, [pc, #448]	; (80018a8 <main+0x200>)
 80016e8:	f7ff fc56 	bl	8000f98 <BMP280_Read_All>


	  memset(&string, 0, strlen(string));
 80016ec:	463b      	mov	r3, r7
 80016ee:	4618      	mov	r0, r3
 80016f0:	f7fe fd6a 	bl	80001c8 <strlen>
 80016f4:	4602      	mov	r2, r0
 80016f6:	463b      	mov	r3, r7
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f002 fe52 	bl	80043a4 <memset>

	  strcat(string, "Temperature: ");
 8001700:	463b      	mov	r3, r7
 8001702:	4618      	mov	r0, r3
 8001704:	f7fe fd60 	bl	80001c8 <strlen>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	463b      	mov	r3, r7
 800170e:	4413      	add	r3, r2
 8001710:	4a66      	ldr	r2, [pc, #408]	; (80018ac <main+0x204>)
 8001712:	461c      	mov	r4, r3
 8001714:	4613      	mov	r3, r2
 8001716:	cb07      	ldmia	r3!, {r0, r1, r2}
 8001718:	6020      	str	r0, [r4, #0]
 800171a:	6061      	str	r1, [r4, #4]
 800171c:	60a2      	str	r2, [r4, #8]
 800171e:	881b      	ldrh	r3, [r3, #0]
 8001720:	81a3      	strh	r3, [r4, #12]
	  utoa(bmp280.temperature, &string[strlen(string)], 3);
 8001722:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <main+0x200>)
 8001724:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001728:	eebc 8ae7 	vcvt.u32.f32	s16, s15
 800172c:	463b      	mov	r3, r7
 800172e:	4618      	mov	r0, r3
 8001730:	f7fe fd4a 	bl	80001c8 <strlen>
 8001734:	4602      	mov	r2, r0
 8001736:	463b      	mov	r3, r7
 8001738:	4413      	add	r3, r2
 800173a:	2203      	movs	r2, #3
 800173c:	4619      	mov	r1, r3
 800173e:	ee18 0a10 	vmov	r0, s16
 8001742:	f002 fe2d 	bl	80043a0 <utoa>
	  strcat(string, " C\n");
 8001746:	463b      	mov	r3, r7
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe fd3d 	bl	80001c8 <strlen>
 800174e:	4603      	mov	r3, r0
 8001750:	461a      	mov	r2, r3
 8001752:	463b      	mov	r3, r7
 8001754:	4413      	add	r3, r2
 8001756:	4a56      	ldr	r2, [pc, #344]	; (80018b0 <main+0x208>)
 8001758:	6810      	ldr	r0, [r2, #0]
 800175a:	6018      	str	r0, [r3, #0]

	  strcat(string, "Pressure: ");
 800175c:	463b      	mov	r3, r7
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd32 	bl	80001c8 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	461a      	mov	r2, r3
 8001768:	463b      	mov	r3, r7
 800176a:	4413      	add	r3, r2
 800176c:	4951      	ldr	r1, [pc, #324]	; (80018b4 <main+0x20c>)
 800176e:	461a      	mov	r2, r3
 8001770:	460b      	mov	r3, r1
 8001772:	cb03      	ldmia	r3!, {r0, r1}
 8001774:	6010      	str	r0, [r2, #0]
 8001776:	6051      	str	r1, [r2, #4]
 8001778:	8819      	ldrh	r1, [r3, #0]
 800177a:	789b      	ldrb	r3, [r3, #2]
 800177c:	8111      	strh	r1, [r2, #8]
 800177e:	7293      	strb	r3, [r2, #10]
	  utoa(bmp280.pressure, &string[strlen(string)], 3);
 8001780:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <main+0x200>)
 8001782:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001786:	eebc 8ae7 	vcvt.u32.f32	s16, s15
 800178a:	463b      	mov	r3, r7
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe fd1b 	bl	80001c8 <strlen>
 8001792:	4602      	mov	r2, r0
 8001794:	463b      	mov	r3, r7
 8001796:	4413      	add	r3, r2
 8001798:	2203      	movs	r2, #3
 800179a:	4619      	mov	r1, r3
 800179c:	ee18 0a10 	vmov	r0, s16
 80017a0:	f002 fdfe 	bl	80043a0 <utoa>
	  strcat(string, " Pa\n");
 80017a4:	463b      	mov	r3, r7
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7fe fd0e 	bl	80001c8 <strlen>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	463b      	mov	r3, r7
 80017b2:	4413      	add	r3, r2
 80017b4:	4a40      	ldr	r2, [pc, #256]	; (80018b8 <main+0x210>)
 80017b6:	6810      	ldr	r0, [r2, #0]
 80017b8:	6018      	str	r0, [r3, #0]
 80017ba:	7912      	ldrb	r2, [r2, #4]
 80017bc:	711a      	strb	r2, [r3, #4]

	  strcat(string, "Altitude: ");
 80017be:	463b      	mov	r3, r7
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7fe fd01 	bl	80001c8 <strlen>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	463b      	mov	r3, r7
 80017cc:	4413      	add	r3, r2
 80017ce:	493b      	ldr	r1, [pc, #236]	; (80018bc <main+0x214>)
 80017d0:	461a      	mov	r2, r3
 80017d2:	460b      	mov	r3, r1
 80017d4:	cb03      	ldmia	r3!, {r0, r1}
 80017d6:	6010      	str	r0, [r2, #0]
 80017d8:	6051      	str	r1, [r2, #4]
 80017da:	8819      	ldrh	r1, [r3, #0]
 80017dc:	789b      	ldrb	r3, [r3, #2]
 80017de:	8111      	strh	r1, [r2, #8]
 80017e0:	7293      	strb	r3, [r2, #10]
	  utoa(bmp280.altitude, &string[strlen(string)], 3);
 80017e2:	4b31      	ldr	r3, [pc, #196]	; (80018a8 <main+0x200>)
 80017e4:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80017e8:	eebc 8ae7 	vcvt.u32.f32	s16, s15
 80017ec:	463b      	mov	r3, r7
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7fe fcea 	bl	80001c8 <strlen>
 80017f4:	4602      	mov	r2, r0
 80017f6:	463b      	mov	r3, r7
 80017f8:	4413      	add	r3, r2
 80017fa:	2203      	movs	r2, #3
 80017fc:	4619      	mov	r1, r3
 80017fe:	ee18 0a10 	vmov	r0, s16
 8001802:	f002 fdcd 	bl	80043a0 <utoa>
	  strcat(string, " m\n");
 8001806:	463b      	mov	r3, r7
 8001808:	4618      	mov	r0, r3
 800180a:	f7fe fcdd 	bl	80001c8 <strlen>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	463b      	mov	r3, r7
 8001814:	4413      	add	r3, r2
 8001816:	4a2a      	ldr	r2, [pc, #168]	; (80018c0 <main+0x218>)
 8001818:	6810      	ldr	r0, [r2, #0]
 800181a:	6018      	str	r0, [r3, #0]

	  strcat(string, "Relative altitude: ");
 800181c:	463b      	mov	r3, r7
 800181e:	4618      	mov	r0, r3
 8001820:	f7fe fcd2 	bl	80001c8 <strlen>
 8001824:	4603      	mov	r3, r0
 8001826:	461a      	mov	r2, r3
 8001828:	463b      	mov	r3, r7
 800182a:	4413      	add	r3, r2
 800182c:	4a25      	ldr	r2, [pc, #148]	; (80018c4 <main+0x21c>)
 800182e:	461d      	mov	r5, r3
 8001830:	4614      	mov	r4, r2
 8001832:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001834:	6028      	str	r0, [r5, #0]
 8001836:	6069      	str	r1, [r5, #4]
 8001838:	60aa      	str	r2, [r5, #8]
 800183a:	60eb      	str	r3, [r5, #12]
 800183c:	6820      	ldr	r0, [r4, #0]
 800183e:	6128      	str	r0, [r5, #16]
	  utoa(bmp280.altitude-bmp280.init_height, &string[strlen(string)], 3);
 8001840:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <main+0x200>)
 8001842:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <main+0x200>)
 8001848:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800184c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001850:	eebc 8ae7 	vcvt.u32.f32	s16, s15
 8001854:	463b      	mov	r3, r7
 8001856:	4618      	mov	r0, r3
 8001858:	f7fe fcb6 	bl	80001c8 <strlen>
 800185c:	4602      	mov	r2, r0
 800185e:	463b      	mov	r3, r7
 8001860:	4413      	add	r3, r2
 8001862:	2203      	movs	r2, #3
 8001864:	4619      	mov	r1, r3
 8001866:	ee18 0a10 	vmov	r0, s16
 800186a:	f002 fd99 	bl	80043a0 <utoa>
	  strcat(string, " m\n\n\n");
 800186e:	463b      	mov	r3, r7
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fca9 	bl	80001c8 <strlen>
 8001876:	4603      	mov	r3, r0
 8001878:	461a      	mov	r2, r3
 800187a:	463b      	mov	r3, r7
 800187c:	4413      	add	r3, r2
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <main+0x220>)
 8001880:	6810      	ldr	r0, [r2, #0]
 8001882:	6018      	str	r0, [r3, #0]
 8001884:	8892      	ldrh	r2, [r2, #4]
 8001886:	809a      	strh	r2, [r3, #4]

	  HAL_UART_Transmit(&huart2,(uint8_t*) &string, strlen(string), HAL_MAX_DELAY);
 8001888:	463b      	mov	r3, r7
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fc9c 	bl	80001c8 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	4639      	mov	r1, r7
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
 800189a:	480c      	ldr	r0, [pc, #48]	; (80018cc <main+0x224>)
 800189c:	f002 f982 	bl	8003ba4 <HAL_UART_Transmit>
	  BMP280_Read_All(&bmp280);
 80018a0:	e721      	b.n	80016e6 <main+0x3e>
 80018a2:	bf00      	nop
 80018a4:	2000007c 	.word	0x2000007c
 80018a8:	200000d0 	.word	0x200000d0
 80018ac:	08004ba4 	.word	0x08004ba4
 80018b0:	08004bb4 	.word	0x08004bb4
 80018b4:	08004bb8 	.word	0x08004bb8
 80018b8:	08004bc4 	.word	0x08004bc4
 80018bc:	08004bcc 	.word	0x08004bcc
 80018c0:	08004bd8 	.word	0x08004bd8
 80018c4:	08004bdc 	.word	0x08004bdc
 80018c8:	08004bf0 	.word	0x08004bf0
 80018cc:	20000104 	.word	0x20000104

080018d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b094      	sub	sp, #80	; 0x50
 80018d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018d6:	f107 0320 	add.w	r3, r7, #32
 80018da:	2230      	movs	r2, #48	; 0x30
 80018dc:	2100      	movs	r1, #0
 80018de:	4618      	mov	r0, r3
 80018e0:	f002 fd60 	bl	80043a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
 80018f8:	4b28      	ldr	r3, [pc, #160]	; (800199c <SystemClock_Config+0xcc>)
 80018fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fc:	4a27      	ldr	r2, [pc, #156]	; (800199c <SystemClock_Config+0xcc>)
 80018fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001902:	6413      	str	r3, [r2, #64]	; 0x40
 8001904:	4b25      	ldr	r3, [pc, #148]	; (800199c <SystemClock_Config+0xcc>)
 8001906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001908:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001910:	2300      	movs	r3, #0
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	4b22      	ldr	r3, [pc, #136]	; (80019a0 <SystemClock_Config+0xd0>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <SystemClock_Config+0xd0>)
 800191a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800191e:	6013      	str	r3, [r2, #0]
 8001920:	4b1f      	ldr	r3, [pc, #124]	; (80019a0 <SystemClock_Config+0xd0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800192c:	2301      	movs	r3, #1
 800192e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001930:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001934:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001936:	2302      	movs	r3, #2
 8001938:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800193a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001940:	2308      	movs	r3, #8
 8001942:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001944:	23a8      	movs	r3, #168	; 0xa8
 8001946:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001948:	2302      	movs	r3, #2
 800194a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800194c:	2304      	movs	r3, #4
 800194e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001950:	f107 0320 	add.w	r3, r7, #32
 8001954:	4618      	mov	r0, r3
 8001956:	f001 fc3d 	bl	80031d4 <HAL_RCC_OscConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001960:	f000 f820 	bl	80019a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001964:	230f      	movs	r3, #15
 8001966:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001968:	2302      	movs	r3, #2
 800196a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800196c:	2300      	movs	r3, #0
 800196e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV8;
 8001970:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001974:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001976:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800197a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800197c:	f107 030c 	add.w	r3, r7, #12
 8001980:	2105      	movs	r1, #5
 8001982:	4618      	mov	r0, r3
 8001984:	f001 fe9e 	bl	80036c4 <HAL_RCC_ClockConfig>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800198e:	f000 f809 	bl	80019a4 <Error_Handler>
  }
}
 8001992:	bf00      	nop
 8001994:	3750      	adds	r7, #80	; 0x50
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40023800 	.word	0x40023800
 80019a0:	40007000 	.word	0x40007000

080019a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a4:	b480      	push	{r7}
 80019a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a8:	b672      	cpsid	i
}
 80019aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019ac:	e7fe      	b.n	80019ac <Error_Handler+0x8>
	...

080019b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b083      	sub	sp, #12
 80019b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	607b      	str	r3, [r7, #4]
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <HAL_MspInit+0x4c>)
 80019bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019be:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_MspInit+0x4c>)
 80019c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c4:	6453      	str	r3, [r2, #68]	; 0x44
 80019c6:	4b0d      	ldr	r3, [pc, #52]	; (80019fc <HAL_MspInit+0x4c>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ce:	607b      	str	r3, [r7, #4]
 80019d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d2:	2300      	movs	r3, #0
 80019d4:	603b      	str	r3, [r7, #0]
 80019d6:	4b09      	ldr	r3, [pc, #36]	; (80019fc <HAL_MspInit+0x4c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	4a08      	ldr	r2, [pc, #32]	; (80019fc <HAL_MspInit+0x4c>)
 80019dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e0:	6413      	str	r3, [r2, #64]	; 0x40
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_MspInit+0x4c>)
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ea:	603b      	str	r3, [r7, #0]
 80019ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	40023800 	.word	0x40023800

08001a00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a04:	e7fe      	b.n	8001a04 <NMI_Handler+0x4>

08001a06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a0a:	e7fe      	b.n	8001a0a <HardFault_Handler+0x4>

08001a0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <MemManage_Handler+0x4>

08001a12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a12:	b480      	push	{r7}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <BusFault_Handler+0x4>

08001a18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a1c:	e7fe      	b.n	8001a1c <UsageFault_Handler+0x4>

08001a1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr

08001a2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a30:	bf00      	nop
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr

08001a3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a3a:	b480      	push	{r7}
 8001a3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a3e:	bf00      	nop
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4c:	f000 f902 	bl	8001c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a58:	4b06      	ldr	r3, [pc, #24]	; (8001a74 <SystemInit+0x20>)
 8001a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a5e:	4a05      	ldr	r2, [pc, #20]	; (8001a74 <SystemInit+0x20>)
 8001a60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a68:	bf00      	nop
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a7c:	4b11      	ldr	r3, [pc, #68]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	4a12      	ldr	r2, [pc, #72]	; (8001ac8 <MX_USART2_UART_Init+0x50>)
 8001a80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a82:	4b10      	ldr	r3, [pc, #64]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a96:	4b0b      	ldr	r3, [pc, #44]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a9c:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001a9e:	220c      	movs	r2, #12
 8001aa0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa2:	4b08      	ldr	r3, [pc, #32]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aae:	4805      	ldr	r0, [pc, #20]	; (8001ac4 <MX_USART2_UART_Init+0x4c>)
 8001ab0:	f002 f828 	bl	8003b04 <HAL_UART_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aba:	f7ff ff73 	bl	80019a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000104 	.word	0x20000104
 8001ac8:	40004400 	.word	0x40004400

08001acc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	; 0x28
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad4:	f107 0314 	add.w	r3, r7, #20
 8001ad8:	2200      	movs	r2, #0
 8001ada:	601a      	str	r2, [r3, #0]
 8001adc:	605a      	str	r2, [r3, #4]
 8001ade:	609a      	str	r2, [r3, #8]
 8001ae0:	60da      	str	r2, [r3, #12]
 8001ae2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a19      	ldr	r2, [pc, #100]	; (8001b50 <HAL_UART_MspInit+0x84>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d12b      	bne.n	8001b46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
 8001af2:	4b18      	ldr	r3, [pc, #96]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a17      	ldr	r2, [pc, #92]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001af8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b15      	ldr	r3, [pc, #84]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b06:	613b      	str	r3, [r7, #16]
 8001b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
 8001b0e:	4b11      	ldr	r3, [pc, #68]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b12:	4a10      	ldr	r2, [pc, #64]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1a:	4b0e      	ldr	r3, [pc, #56]	; (8001b54 <HAL_UART_MspInit+0x88>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b26:	230c      	movs	r3, #12
 8001b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b32:	2303      	movs	r3, #3
 8001b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b36:	2307      	movs	r3, #7
 8001b38:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b3a:	f107 0314 	add.w	r3, r7, #20
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <HAL_UART_MspInit+0x8c>)
 8001b42:	f000 f9b1 	bl	8001ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b46:	bf00      	nop
 8001b48:	3728      	adds	r7, #40	; 0x28
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
 8001b4e:	bf00      	nop
 8001b50:	40004400 	.word	0x40004400
 8001b54:	40023800 	.word	0x40023800
 8001b58:	40020000 	.word	0x40020000

08001b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b94 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b60:	f7ff ff78 	bl	8001a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b64:	480c      	ldr	r0, [pc, #48]	; (8001b98 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b66:	490d      	ldr	r1, [pc, #52]	; (8001b9c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b68:	4a0d      	ldr	r2, [pc, #52]	; (8001ba0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b6c:	e002      	b.n	8001b74 <LoopCopyDataInit>

08001b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b72:	3304      	adds	r3, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b78:	d3f9      	bcc.n	8001b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ba4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b7c:	4c0a      	ldr	r4, [pc, #40]	; (8001ba8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b80:	e001      	b.n	8001b86 <LoopFillZerobss>

08001b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b84:	3204      	adds	r2, #4

08001b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b88:	d3fb      	bcc.n	8001b82 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b8a:	f002 fc19 	bl	80043c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b8e:	f7ff fd8b 	bl	80016a8 <main>
  bx  lr    
 8001b92:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b9c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001ba0:	08004c60 	.word	0x08004c60
  ldr r2, =_sbss
 8001ba4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001ba8:	20000288 	.word	0x20000288

08001bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bac:	e7fe      	b.n	8001bac <ADC_IRQHandler>
	...

08001bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bb4:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <HAL_Init+0x40>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <HAL_Init+0x40>)
 8001bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bc0:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_Init+0x40>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_Init+0x40>)
 8001bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bcc:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <HAL_Init+0x40>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a07      	ldr	r2, [pc, #28]	; (8001bf0 <HAL_Init+0x40>)
 8001bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bd8:	2003      	movs	r0, #3
 8001bda:	f000 f931 	bl	8001e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bde:	200f      	movs	r0, #15
 8001be0:	f000 f808 	bl	8001bf4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001be4:	f7ff fee4 	bl	80019b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40023c00 	.word	0x40023c00

08001bf4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b082      	sub	sp, #8
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bfc:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_InitTick+0x54>)
 8001bfe:	681a      	ldr	r2, [r3, #0]
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_InitTick+0x58>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c12:	4618      	mov	r0, r3
 8001c14:	f000 f93b 	bl	8001e8e <HAL_SYSTICK_Config>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e00e      	b.n	8001c40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2b0f      	cmp	r3, #15
 8001c26:	d80a      	bhi.n	8001c3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c28:	2200      	movs	r2, #0
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c30:	f000 f911 	bl	8001e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c34:	4a06      	ldr	r2, [pc, #24]	; (8001c50 <HAL_InitTick+0x5c>)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000004 	.word	0x20000004
 8001c4c:	2000000c 	.word	0x2000000c
 8001c50:	20000008 	.word	0x20000008

08001c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <HAL_IncTick+0x20>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_IncTick+0x24>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4413      	add	r3, r2
 8001c64:	4a04      	ldr	r2, [pc, #16]	; (8001c78 <HAL_IncTick+0x24>)
 8001c66:	6013      	str	r3, [r2, #0]
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	2000000c 	.word	0x2000000c
 8001c78:	2000014c 	.word	0x2000014c

08001c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c80:	4b03      	ldr	r3, [pc, #12]	; (8001c90 <HAL_GetTick+0x14>)
 8001c82:	681b      	ldr	r3, [r3, #0]
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr
 8001c8e:	bf00      	nop
 8001c90:	2000014c 	.word	0x2000014c

08001c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c9c:	f7ff ffee 	bl	8001c7c <HAL_GetTick>
 8001ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cac:	d005      	beq.n	8001cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cae:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_Delay+0x44>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cba:	bf00      	nop
 8001cbc:	f7ff ffde 	bl	8001c7c <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	68fa      	ldr	r2, [r7, #12]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d8f7      	bhi.n	8001cbc <HAL_Delay+0x28>
  {
  }
}
 8001ccc:	bf00      	nop
 8001cce:	bf00      	nop
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000000c 	.word	0x2000000c

08001cdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d0e:	4a04      	ldr	r2, [pc, #16]	; (8001d20 <__NVIC_SetPriorityGrouping+0x44>)
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	60d3      	str	r3, [r2, #12]
}
 8001d14:	bf00      	nop
 8001d16:	3714      	adds	r7, #20
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	e000ed00 	.word	0xe000ed00

08001d24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <__NVIC_GetPriorityGrouping+0x18>)
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	0a1b      	lsrs	r3, r3, #8
 8001d2e:	f003 0307 	and.w	r3, r3, #7
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	e000ed00 	.word	0xe000ed00

08001d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	4603      	mov	r3, r0
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	db0a      	blt.n	8001d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	b2da      	uxtb	r2, r3
 8001d58:	490c      	ldr	r1, [pc, #48]	; (8001d8c <__NVIC_SetPriority+0x4c>)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	0112      	lsls	r2, r2, #4
 8001d60:	b2d2      	uxtb	r2, r2
 8001d62:	440b      	add	r3, r1
 8001d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d68:	e00a      	b.n	8001d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	b2da      	uxtb	r2, r3
 8001d6e:	4908      	ldr	r1, [pc, #32]	; (8001d90 <__NVIC_SetPriority+0x50>)
 8001d70:	79fb      	ldrb	r3, [r7, #7]
 8001d72:	f003 030f 	and.w	r3, r3, #15
 8001d76:	3b04      	subs	r3, #4
 8001d78:	0112      	lsls	r2, r2, #4
 8001d7a:	b2d2      	uxtb	r2, r2
 8001d7c:	440b      	add	r3, r1
 8001d7e:	761a      	strb	r2, [r3, #24]
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	e000e100 	.word	0xe000e100
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b089      	sub	sp, #36	; 0x24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f1c3 0307 	rsb	r3, r3, #7
 8001dae:	2b04      	cmp	r3, #4
 8001db0:	bf28      	it	cs
 8001db2:	2304      	movcs	r3, #4
 8001db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3304      	adds	r3, #4
 8001dba:	2b06      	cmp	r3, #6
 8001dbc:	d902      	bls.n	8001dc4 <NVIC_EncodePriority+0x30>
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	3b03      	subs	r3, #3
 8001dc2:	e000      	b.n	8001dc6 <NVIC_EncodePriority+0x32>
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	401a      	ands	r2, r3
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43d9      	mvns	r1, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dec:	4313      	orrs	r3, r2
         );
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	3724      	adds	r7, #36	; 0x24
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e0c:	d301      	bcc.n	8001e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e00f      	b.n	8001e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e12:	4a0a      	ldr	r2, [pc, #40]	; (8001e3c <SysTick_Config+0x40>)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	3b01      	subs	r3, #1
 8001e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e1a:	210f      	movs	r1, #15
 8001e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e20:	f7ff ff8e 	bl	8001d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e24:	4b05      	ldr	r3, [pc, #20]	; (8001e3c <SysTick_Config+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e2a:	4b04      	ldr	r3, [pc, #16]	; (8001e3c <SysTick_Config+0x40>)
 8001e2c:	2207      	movs	r2, #7
 8001e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e30:	2300      	movs	r3, #0
}
 8001e32:	4618      	mov	r0, r3
 8001e34:	3708      	adds	r7, #8
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	e000e010 	.word	0xe000e010

08001e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff ff47 	bl	8001cdc <__NVIC_SetPriorityGrouping>
}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b086      	sub	sp, #24
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e64:	2300      	movs	r3, #0
 8001e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e68:	f7ff ff5c 	bl	8001d24 <__NVIC_GetPriorityGrouping>
 8001e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e6e:	687a      	ldr	r2, [r7, #4]
 8001e70:	68b9      	ldr	r1, [r7, #8]
 8001e72:	6978      	ldr	r0, [r7, #20]
 8001e74:	f7ff ff8e 	bl	8001d94 <NVIC_EncodePriority>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7e:	4611      	mov	r1, r2
 8001e80:	4618      	mov	r0, r3
 8001e82:	f7ff ff5d 	bl	8001d40 <__NVIC_SetPriority>
}
 8001e86:	bf00      	nop
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}

08001e8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	b082      	sub	sp, #8
 8001e92:	af00      	add	r7, sp, #0
 8001e94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f7ff ffb0 	bl	8001dfc <SysTick_Config>
 8001e9c:	4603      	mov	r3, r0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3708      	adds	r7, #8
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b089      	sub	sp, #36	; 0x24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
 8001eb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
 8001ec2:	e16b      	b.n	800219c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	697a      	ldr	r2, [r7, #20]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ed8:	693a      	ldr	r2, [r7, #16]
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	f040 815a 	bne.w	8002196 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ee2:	683b      	ldr	r3, [r7, #0]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	f003 0303 	and.w	r3, r3, #3
 8001eea:	2b01      	cmp	r3, #1
 8001eec:	d005      	beq.n	8001efa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ef6:	2b02      	cmp	r3, #2
 8001ef8:	d130      	bne.n	8001f5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	2203      	movs	r2, #3
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43db      	mvns	r3, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4013      	ands	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	68da      	ldr	r2, [r3, #12]
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	005b      	lsls	r3, r3, #1
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	69ba      	ldr	r2, [r7, #24]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	69ba      	ldr	r2, [r7, #24]
 8001f28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f30:	2201      	movs	r2, #1
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	fa02 f303 	lsl.w	r3, r2, r3
 8001f38:	43db      	mvns	r3, r3
 8001f3a:	69ba      	ldr	r2, [r7, #24]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 0201 	and.w	r2, r3, #1
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	4313      	orrs	r3, r2
 8001f54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d017      	beq.n	8001f98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	2203      	movs	r2, #3
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	689a      	ldr	r2, [r3, #8]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	005b      	lsls	r3, r3, #1
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	4313      	orrs	r3, r2
 8001f90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d123      	bne.n	8001fec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	08da      	lsrs	r2, r3, #3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3208      	adds	r2, #8
 8001fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	f003 0307 	and.w	r3, r3, #7
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	220f      	movs	r2, #15
 8001fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	691a      	ldr	r2, [r3, #16]
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	f003 0307 	and.w	r3, r3, #7
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	08da      	lsrs	r2, r3, #3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3208      	adds	r2, #8
 8001fe6:	69b9      	ldr	r1, [r7, #24]
 8001fe8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	2203      	movs	r2, #3
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4013      	ands	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 0203 	and.w	r2, r3, #3
 800200c:	69fb      	ldr	r3, [r7, #28]
 800200e:	005b      	lsls	r3, r3, #1
 8002010:	fa02 f303 	lsl.w	r3, r2, r3
 8002014:	69ba      	ldr	r2, [r7, #24]
 8002016:	4313      	orrs	r3, r2
 8002018:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 80b4 	beq.w	8002196 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b60      	ldr	r3, [pc, #384]	; (80021b4 <HAL_GPIO_Init+0x30c>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002036:	4a5f      	ldr	r2, [pc, #380]	; (80021b4 <HAL_GPIO_Init+0x30c>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800203c:	6453      	str	r3, [r2, #68]	; 0x44
 800203e:	4b5d      	ldr	r3, [pc, #372]	; (80021b4 <HAL_GPIO_Init+0x30c>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800204a:	4a5b      	ldr	r2, [pc, #364]	; (80021b8 <HAL_GPIO_Init+0x310>)
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	089b      	lsrs	r3, r3, #2
 8002050:	3302      	adds	r3, #2
 8002052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002056:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002058:	69fb      	ldr	r3, [r7, #28]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	220f      	movs	r2, #15
 8002062:	fa02 f303 	lsl.w	r3, r2, r3
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a52      	ldr	r2, [pc, #328]	; (80021bc <HAL_GPIO_Init+0x314>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d02b      	beq.n	80020ce <HAL_GPIO_Init+0x226>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	4a51      	ldr	r2, [pc, #324]	; (80021c0 <HAL_GPIO_Init+0x318>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d025      	beq.n	80020ca <HAL_GPIO_Init+0x222>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a50      	ldr	r2, [pc, #320]	; (80021c4 <HAL_GPIO_Init+0x31c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d01f      	beq.n	80020c6 <HAL_GPIO_Init+0x21e>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4a4f      	ldr	r2, [pc, #316]	; (80021c8 <HAL_GPIO_Init+0x320>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d019      	beq.n	80020c2 <HAL_GPIO_Init+0x21a>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a4e      	ldr	r2, [pc, #312]	; (80021cc <HAL_GPIO_Init+0x324>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d013      	beq.n	80020be <HAL_GPIO_Init+0x216>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a4d      	ldr	r2, [pc, #308]	; (80021d0 <HAL_GPIO_Init+0x328>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d00d      	beq.n	80020ba <HAL_GPIO_Init+0x212>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a4c      	ldr	r2, [pc, #304]	; (80021d4 <HAL_GPIO_Init+0x32c>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d007      	beq.n	80020b6 <HAL_GPIO_Init+0x20e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a4b      	ldr	r2, [pc, #300]	; (80021d8 <HAL_GPIO_Init+0x330>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d101      	bne.n	80020b2 <HAL_GPIO_Init+0x20a>
 80020ae:	2307      	movs	r3, #7
 80020b0:	e00e      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020b2:	2308      	movs	r3, #8
 80020b4:	e00c      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020b6:	2306      	movs	r3, #6
 80020b8:	e00a      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ba:	2305      	movs	r3, #5
 80020bc:	e008      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020be:	2304      	movs	r3, #4
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020c2:	2303      	movs	r3, #3
 80020c4:	e004      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e002      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <HAL_GPIO_Init+0x228>
 80020ce:	2300      	movs	r3, #0
 80020d0:	69fa      	ldr	r2, [r7, #28]
 80020d2:	f002 0203 	and.w	r2, r2, #3
 80020d6:	0092      	lsls	r2, r2, #2
 80020d8:	4093      	lsls	r3, r2
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4313      	orrs	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80020e0:	4935      	ldr	r1, [pc, #212]	; (80021b8 <HAL_GPIO_Init+0x310>)
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	089b      	lsrs	r3, r3, #2
 80020e6:	3302      	adds	r3, #2
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020ee:	4b3b      	ldr	r3, [pc, #236]	; (80021dc <HAL_GPIO_Init+0x334>)
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	43db      	mvns	r3, r3
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	4013      	ands	r3, r2
 80020fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d003      	beq.n	8002112 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002112:	4a32      	ldr	r2, [pc, #200]	; (80021dc <HAL_GPIO_Init+0x334>)
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002118:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_GPIO_Init+0x334>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	43db      	mvns	r3, r3
 8002122:	69ba      	ldr	r2, [r7, #24]
 8002124:	4013      	ands	r3, r2
 8002126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002130:	2b00      	cmp	r3, #0
 8002132:	d003      	beq.n	800213c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	4313      	orrs	r3, r2
 800213a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800213c:	4a27      	ldr	r2, [pc, #156]	; (80021dc <HAL_GPIO_Init+0x334>)
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002142:	4b26      	ldr	r3, [pc, #152]	; (80021dc <HAL_GPIO_Init+0x334>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	43db      	mvns	r3, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4013      	ands	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002166:	4a1d      	ldr	r2, [pc, #116]	; (80021dc <HAL_GPIO_Init+0x334>)
 8002168:	69bb      	ldr	r3, [r7, #24]
 800216a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800216c:	4b1b      	ldr	r3, [pc, #108]	; (80021dc <HAL_GPIO_Init+0x334>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	43db      	mvns	r3, r3
 8002176:	69ba      	ldr	r2, [r7, #24]
 8002178:	4013      	ands	r3, r2
 800217a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d003      	beq.n	8002190 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	693b      	ldr	r3, [r7, #16]
 800218c:	4313      	orrs	r3, r2
 800218e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002190:	4a12      	ldr	r2, [pc, #72]	; (80021dc <HAL_GPIO_Init+0x334>)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002196:	69fb      	ldr	r3, [r7, #28]
 8002198:	3301      	adds	r3, #1
 800219a:	61fb      	str	r3, [r7, #28]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	2b0f      	cmp	r3, #15
 80021a0:	f67f ae90 	bls.w	8001ec4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80021a4:	bf00      	nop
 80021a6:	bf00      	nop
 80021a8:	3724      	adds	r7, #36	; 0x24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
 80021b2:	bf00      	nop
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40013800 	.word	0x40013800
 80021bc:	40020000 	.word	0x40020000
 80021c0:	40020400 	.word	0x40020400
 80021c4:	40020800 	.word	0x40020800
 80021c8:	40020c00 	.word	0x40020c00
 80021cc:	40021000 	.word	0x40021000
 80021d0:	40021400 	.word	0x40021400
 80021d4:	40021800 	.word	0x40021800
 80021d8:	40021c00 	.word	0x40021c00
 80021dc:	40013c00 	.word	0x40013c00

080021e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e12b      	b.n	800244a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d106      	bne.n	800220c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f7ff fa06 	bl	8001618 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2224      	movs	r2, #36	; 0x24
 8002210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002232:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002242:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002244:	f001 fc36 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8002248:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4a81      	ldr	r2, [pc, #516]	; (8002454 <HAL_I2C_Init+0x274>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d807      	bhi.n	8002264 <HAL_I2C_Init+0x84>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	4a80      	ldr	r2, [pc, #512]	; (8002458 <HAL_I2C_Init+0x278>)
 8002258:	4293      	cmp	r3, r2
 800225a:	bf94      	ite	ls
 800225c:	2301      	movls	r3, #1
 800225e:	2300      	movhi	r3, #0
 8002260:	b2db      	uxtb	r3, r3
 8002262:	e006      	b.n	8002272 <HAL_I2C_Init+0x92>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	4a7d      	ldr	r2, [pc, #500]	; (800245c <HAL_I2C_Init+0x27c>)
 8002268:	4293      	cmp	r3, r2
 800226a:	bf94      	ite	ls
 800226c:	2301      	movls	r3, #1
 800226e:	2300      	movhi	r3, #0
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	e0e7      	b.n	800244a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a78      	ldr	r2, [pc, #480]	; (8002460 <HAL_I2C_Init+0x280>)
 800227e:	fba2 2303 	umull	r2, r3, r2, r3
 8002282:	0c9b      	lsrs	r3, r3, #18
 8002284:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	68ba      	ldr	r2, [r7, #8]
 8002296:	430a      	orrs	r2, r1
 8002298:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a6a      	ldr	r2, [pc, #424]	; (8002454 <HAL_I2C_Init+0x274>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d802      	bhi.n	80022b4 <HAL_I2C_Init+0xd4>
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	3301      	adds	r3, #1
 80022b2:	e009      	b.n	80022c8 <HAL_I2C_Init+0xe8>
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80022ba:	fb02 f303 	mul.w	r3, r2, r3
 80022be:	4a69      	ldr	r2, [pc, #420]	; (8002464 <HAL_I2C_Init+0x284>)
 80022c0:	fba2 2303 	umull	r2, r3, r2, r3
 80022c4:	099b      	lsrs	r3, r3, #6
 80022c6:	3301      	adds	r3, #1
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	6812      	ldr	r2, [r2, #0]
 80022cc:	430b      	orrs	r3, r1
 80022ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	69db      	ldr	r3, [r3, #28]
 80022d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	495c      	ldr	r1, [pc, #368]	; (8002454 <HAL_I2C_Init+0x274>)
 80022e4:	428b      	cmp	r3, r1
 80022e6:	d819      	bhi.n	800231c <HAL_I2C_Init+0x13c>
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	1e59      	subs	r1, r3, #1
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80022f6:	1c59      	adds	r1, r3, #1
 80022f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022fc:	400b      	ands	r3, r1
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00a      	beq.n	8002318 <HAL_I2C_Init+0x138>
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	1e59      	subs	r1, r3, #1
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002310:	3301      	adds	r3, #1
 8002312:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002316:	e051      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 8002318:	2304      	movs	r3, #4
 800231a:	e04f      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d111      	bne.n	8002348 <HAL_I2C_Init+0x168>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	1e58      	subs	r0, r3, #1
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	e012      	b.n	800236e <HAL_I2C_Init+0x18e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	1e58      	subs	r0, r3, #1
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	460b      	mov	r3, r1
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	440b      	add	r3, r1
 8002356:	0099      	lsls	r1, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	fbb0 f3f3 	udiv	r3, r0, r3
 800235e:	3301      	adds	r3, #1
 8002360:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_I2C_Init+0x196>
 8002372:	2301      	movs	r3, #1
 8002374:	e022      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d10e      	bne.n	800239c <HAL_I2C_Init+0x1bc>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1e58      	subs	r0, r3, #1
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6859      	ldr	r1, [r3, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	440b      	add	r3, r1
 800238c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002390:	3301      	adds	r3, #1
 8002392:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002396:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800239a:	e00f      	b.n	80023bc <HAL_I2C_Init+0x1dc>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	1e58      	subs	r0, r3, #1
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6859      	ldr	r1, [r3, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	0099      	lsls	r1, r3, #2
 80023ac:	440b      	add	r3, r1
 80023ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80023b2:	3301      	adds	r3, #1
 80023b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80023bc:	6879      	ldr	r1, [r7, #4]
 80023be:	6809      	ldr	r1, [r1, #0]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69da      	ldr	r2, [r3, #28]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6a1b      	ldr	r3, [r3, #32]
 80023d6:	431a      	orrs	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023ee:	687a      	ldr	r2, [r7, #4]
 80023f0:	6911      	ldr	r1, [r2, #16]
 80023f2:	687a      	ldr	r2, [r7, #4]
 80023f4:	68d2      	ldr	r2, [r2, #12]
 80023f6:	4311      	orrs	r1, r2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	430b      	orrs	r3, r1
 80023fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68db      	ldr	r3, [r3, #12]
 8002406:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	695a      	ldr	r2, [r3, #20]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	431a      	orrs	r2, r3
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	430a      	orrs	r2, r1
 800241a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f042 0201 	orr.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2200      	movs	r2, #0
 8002430:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2220      	movs	r2, #32
 8002436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	2200      	movs	r2, #0
 800243e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	000186a0 	.word	0x000186a0
 8002458:	001e847f 	.word	0x001e847f
 800245c:	003d08ff 	.word	0x003d08ff
 8002460:	431bde83 	.word	0x431bde83
 8002464:	10624dd3 	.word	0x10624dd3

08002468 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b088      	sub	sp, #32
 800246c:	af02      	add	r7, sp, #8
 800246e:	60f8      	str	r0, [r7, #12]
 8002470:	607a      	str	r2, [r7, #4]
 8002472:	461a      	mov	r2, r3
 8002474:	460b      	mov	r3, r1
 8002476:	817b      	strh	r3, [r7, #10]
 8002478:	4613      	mov	r3, r2
 800247a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800247c:	f7ff fbfe 	bl	8001c7c <HAL_GetTick>
 8002480:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002488:	b2db      	uxtb	r3, r3
 800248a:	2b20      	cmp	r3, #32
 800248c:	f040 80e0 	bne.w	8002650 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	9300      	str	r3, [sp, #0]
 8002494:	2319      	movs	r3, #25
 8002496:	2201      	movs	r2, #1
 8002498:	4970      	ldr	r1, [pc, #448]	; (800265c <HAL_I2C_Master_Transmit+0x1f4>)
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fc64 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 80024a0:	4603      	mov	r3, r0
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d001      	beq.n	80024aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80024a6:	2302      	movs	r3, #2
 80024a8:	e0d3      	b.n	8002652 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d101      	bne.n	80024b8 <HAL_I2C_Master_Transmit+0x50>
 80024b4:	2302      	movs	r3, #2
 80024b6:	e0cc      	b.n	8002652 <HAL_I2C_Master_Transmit+0x1ea>
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2201      	movs	r2, #1
 80024bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d007      	beq.n	80024de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f042 0201 	orr.w	r2, r2, #1
 80024dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2221      	movs	r2, #33	; 0x21
 80024f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2210      	movs	r2, #16
 80024fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2200      	movs	r2, #0
 8002502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	893a      	ldrh	r2, [r7, #8]
 800250e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	4a50      	ldr	r2, [pc, #320]	; (8002660 <HAL_I2C_Master_Transmit+0x1f8>)
 800251e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002520:	8979      	ldrh	r1, [r7, #10]
 8002522:	697b      	ldr	r3, [r7, #20]
 8002524:	6a3a      	ldr	r2, [r7, #32]
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f000 face 	bl	8002ac8 <I2C_MasterRequestWrite>
 800252c:	4603      	mov	r3, r0
 800252e:	2b00      	cmp	r3, #0
 8002530:	d001      	beq.n	8002536 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002532:	2301      	movs	r3, #1
 8002534:	e08d      	b.n	8002652 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002536:	2300      	movs	r3, #0
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	695b      	ldr	r3, [r3, #20]
 8002540:	613b      	str	r3, [r7, #16]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800254c:	e066      	b.n	800261c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	6a39      	ldr	r1, [r7, #32]
 8002552:	68f8      	ldr	r0, [r7, #12]
 8002554:	f000 fd22 	bl	8002f9c <I2C_WaitOnTXEFlagUntilTimeout>
 8002558:	4603      	mov	r3, r0
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00d      	beq.n	800257a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b04      	cmp	r3, #4
 8002564:	d107      	bne.n	8002576 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002574:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e06b      	b.n	8002652 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257e:	781a      	ldrb	r2, [r3, #0]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258a:	1c5a      	adds	r2, r3, #1
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002594:	b29b      	uxth	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	b29a      	uxth	r2, r3
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	695b      	ldr	r3, [r3, #20]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b04      	cmp	r3, #4
 80025b6:	d11b      	bne.n	80025f0 <HAL_I2C_Master_Transmit+0x188>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d017      	beq.n	80025f0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025c4:	781a      	ldrb	r2, [r3, #0]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025da:	b29b      	uxth	r3, r3
 80025dc:	3b01      	subs	r3, #1
 80025de:	b29a      	uxth	r2, r3
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	6a39      	ldr	r1, [r7, #32]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f000 fd19 	bl	800302c <I2C_WaitOnBTFFlagUntilTimeout>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00d      	beq.n	800261c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	2b04      	cmp	r3, #4
 8002606:	d107      	bne.n	8002618 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681a      	ldr	r2, [r3, #0]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002616:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e01a      	b.n	8002652 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002620:	2b00      	cmp	r3, #0
 8002622:	d194      	bne.n	800254e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002632:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2220      	movs	r2, #32
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2200      	movs	r2, #0
 8002648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	e000      	b.n	8002652 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002650:	2302      	movs	r3, #2
  }
}
 8002652:	4618      	mov	r0, r3
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	00100002 	.word	0x00100002
 8002660:	ffff0000 	.word	0xffff0000

08002664 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b08c      	sub	sp, #48	; 0x30
 8002668:	af02      	add	r7, sp, #8
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	607a      	str	r2, [r7, #4]
 800266e:	461a      	mov	r2, r3
 8002670:	460b      	mov	r3, r1
 8002672:	817b      	strh	r3, [r7, #10]
 8002674:	4613      	mov	r3, r2
 8002676:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002678:	f7ff fb00 	bl	8001c7c <HAL_GetTick>
 800267c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b20      	cmp	r3, #32
 8002688:	f040 8217 	bne.w	8002aba <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	2319      	movs	r3, #25
 8002692:	2201      	movs	r2, #1
 8002694:	497c      	ldr	r1, [pc, #496]	; (8002888 <HAL_I2C_Master_Receive+0x224>)
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 fb66 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80026a2:	2302      	movs	r3, #2
 80026a4:	e20a      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_I2C_Master_Receive+0x50>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e203      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2201      	movs	r2, #1
 80026b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d007      	beq.n	80026da <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	681a      	ldr	r2, [r3, #0]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0201 	orr.w	r2, r2, #1
 80026d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2222      	movs	r2, #34	; 0x22
 80026ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	2210      	movs	r2, #16
 80026f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	2200      	movs	r2, #0
 80026fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	893a      	ldrh	r2, [r7, #8]
 800270a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	4a5c      	ldr	r2, [pc, #368]	; (800288c <HAL_I2C_Master_Receive+0x228>)
 800271a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800271c:	8979      	ldrh	r1, [r7, #10]
 800271e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f000 fa52 	bl	8002bcc <I2C_MasterRequestRead>
 8002728:	4603      	mov	r3, r0
 800272a:	2b00      	cmp	r3, #0
 800272c:	d001      	beq.n	8002732 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e1c4      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	2b00      	cmp	r3, #0
 8002738:	d113      	bne.n	8002762 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800273a:	2300      	movs	r3, #0
 800273c:	623b      	str	r3, [r7, #32]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	623b      	str	r3, [r7, #32]
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	623b      	str	r3, [r7, #32]
 800274e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	e198      	b.n	8002a94 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002766:	2b01      	cmp	r3, #1
 8002768:	d11b      	bne.n	80027a2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002778:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800277a:	2300      	movs	r3, #0
 800277c:	61fb      	str	r3, [r7, #28]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	61fb      	str	r3, [r7, #28]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	61fb      	str	r3, [r7, #28]
 800278e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e178      	b.n	8002a94 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d11b      	bne.n	80027e2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681a      	ldr	r2, [r3, #0]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ca:	2300      	movs	r3, #0
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	699b      	ldr	r3, [r3, #24]
 80027dc:	61bb      	str	r3, [r7, #24]
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	e158      	b.n	8002a94 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80027f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
 80027fc:	617b      	str	r3, [r7, #20]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	699b      	ldr	r3, [r3, #24]
 8002804:	617b      	str	r3, [r7, #20]
 8002806:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002808:	e144      	b.n	8002a94 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280e:	2b03      	cmp	r3, #3
 8002810:	f200 80f1 	bhi.w	80029f6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002818:	2b01      	cmp	r3, #1
 800281a:	d123      	bne.n	8002864 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800281c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800281e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fc4b 	bl	80030bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e145      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	691a      	ldr	r2, [r3, #16]
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800284c:	3b01      	subs	r3, #1
 800284e:	b29a      	uxth	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002862:	e117      	b.n	8002a94 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002868:	2b02      	cmp	r3, #2
 800286a:	d14e      	bne.n	800290a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800286c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002872:	2200      	movs	r2, #0
 8002874:	4906      	ldr	r1, [pc, #24]	; (8002890 <HAL_I2C_Master_Receive+0x22c>)
 8002876:	68f8      	ldr	r0, [r7, #12]
 8002878:	f000 fa76 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d008      	beq.n	8002894 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e11a      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
 8002886:	bf00      	nop
 8002888:	00100002 	.word	0x00100002
 800288c:	ffff0000 	.word	0xffff0000
 8002890:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	691a      	ldr	r2, [r3, #16]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	b2d2      	uxtb	r2, r2
 80028b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	3b01      	subs	r3, #1
 80028d0:	b29a      	uxth	r2, r3
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691a      	ldr	r2, [r3, #16]
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	b2d2      	uxtb	r2, r2
 80028e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e8:	1c5a      	adds	r2, r3, #1
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028f2:	3b01      	subs	r3, #1
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fe:	b29b      	uxth	r3, r3
 8002900:	3b01      	subs	r3, #1
 8002902:	b29a      	uxth	r2, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002908:	e0c4      	b.n	8002a94 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002910:	2200      	movs	r2, #0
 8002912:	496c      	ldr	r1, [pc, #432]	; (8002ac4 <HAL_I2C_Master_Receive+0x460>)
 8002914:	68f8      	ldr	r0, [r7, #12]
 8002916:	f000 fa27 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d001      	beq.n	8002924 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0cb      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002932:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	691a      	ldr	r2, [r3, #16]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293e:	b2d2      	uxtb	r2, r2
 8002940:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002946:	1c5a      	adds	r2, r3, #1
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002950:	3b01      	subs	r3, #1
 8002952:	b29a      	uxth	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800295c:	b29b      	uxth	r3, r3
 800295e:	3b01      	subs	r3, #1
 8002960:	b29a      	uxth	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002968:	9300      	str	r3, [sp, #0]
 800296a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296c:	2200      	movs	r2, #0
 800296e:	4955      	ldr	r1, [pc, #340]	; (8002ac4 <HAL_I2C_Master_Receive+0x460>)
 8002970:	68f8      	ldr	r0, [r7, #12]
 8002972:	f000 f9f9 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002976:	4603      	mov	r3, r0
 8002978:	2b00      	cmp	r3, #0
 800297a:	d001      	beq.n	8002980 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e09d      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800298e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691a      	ldr	r2, [r3, #16]
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a2:	1c5a      	adds	r2, r3, #1
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ac:	3b01      	subs	r3, #1
 80029ae:	b29a      	uxth	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	3b01      	subs	r3, #1
 80029bc:	b29a      	uxth	r2, r3
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	691a      	ldr	r2, [r3, #16]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029cc:	b2d2      	uxtb	r2, r2
 80029ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d4:	1c5a      	adds	r2, r3, #1
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	3b01      	subs	r3, #1
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029f4:	e04e      	b.n	8002a94 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029f8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fb5e 	bl	80030bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d001      	beq.n	8002a0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e058      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	691a      	ldr	r2, [r3, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	b2d2      	uxtb	r2, r2
 8002a16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	1c5a      	adds	r2, r3, #1
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29a      	uxth	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	3b01      	subs	r3, #1
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	f003 0304 	and.w	r3, r3, #4
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d124      	bne.n	8002a94 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a60:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691a      	ldr	r2, [r3, #16]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	b2d2      	uxtb	r2, r2
 8002a6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	3b01      	subs	r3, #1
 8002a8e:	b29a      	uxth	r2, r3
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f47f aeb6 	bne.w	800280a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	e000      	b.n	8002abc <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002aba:	2302      	movs	r3, #2
  }
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3728      	adds	r7, #40	; 0x28
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	00010004 	.word	0x00010004

08002ac8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b088      	sub	sp, #32
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002adc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	2b08      	cmp	r3, #8
 8002ae2:	d006      	beq.n	8002af2 <I2C_MasterRequestWrite+0x2a>
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d003      	beq.n	8002af2 <I2C_MasterRequestWrite+0x2a>
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002af0:	d108      	bne.n	8002b04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b00:	601a      	str	r2, [r3, #0]
 8002b02:	e00b      	b.n	8002b1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	2b12      	cmp	r3, #18
 8002b0a:	d107      	bne.n	8002b1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f91d 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b42:	d103      	bne.n	8002b4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e035      	b.n	8002bbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	691b      	ldr	r3, [r3, #16]
 8002b54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b58:	d108      	bne.n	8002b6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b5a:	897b      	ldrh	r3, [r7, #10]
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	461a      	mov	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b68:	611a      	str	r2, [r3, #16]
 8002b6a:	e01b      	b.n	8002ba4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002b6c:	897b      	ldrh	r3, [r7, #10]
 8002b6e:	11db      	asrs	r3, r3, #7
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	f003 0306 	and.w	r3, r3, #6
 8002b76:	b2db      	uxtb	r3, r3
 8002b78:	f063 030f 	orn	r3, r3, #15
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	490e      	ldr	r1, [pc, #56]	; (8002bc4 <I2C_MasterRequestWrite+0xfc>)
 8002b8a:	68f8      	ldr	r0, [r7, #12]
 8002b8c:	f000 f966 	bl	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d001      	beq.n	8002b9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e010      	b.n	8002bbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002b9a:	897b      	ldrh	r3, [r7, #10]
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <I2C_MasterRequestWrite+0x100>)
 8002baa:	68f8      	ldr	r0, [r7, #12]
 8002bac:	f000 f956 	bl	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3718      	adds	r7, #24
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	00010008 	.word	0x00010008
 8002bc8:	00010002 	.word	0x00010002

08002bcc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	603b      	str	r3, [r7, #0]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bf0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2b08      	cmp	r3, #8
 8002bf6:	d006      	beq.n	8002c06 <I2C_MasterRequestRead+0x3a>
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	2b01      	cmp	r3, #1
 8002bfc:	d003      	beq.n	8002c06 <I2C_MasterRequestRead+0x3a>
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002c04:	d108      	bne.n	8002c18 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	e00b      	b.n	8002c30 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1c:	2b11      	cmp	r3, #17
 8002c1e:	d107      	bne.n	8002c30 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002c2e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002c3c:	68f8      	ldr	r0, [r7, #12]
 8002c3e:	f000 f893 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d00d      	beq.n	8002c64 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c56:	d103      	bne.n	8002c60 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c5e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e079      	b.n	8002d58 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	691b      	ldr	r3, [r3, #16]
 8002c68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002c6c:	d108      	bne.n	8002c80 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002c6e:	897b      	ldrh	r3, [r7, #10]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	f043 0301 	orr.w	r3, r3, #1
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	611a      	str	r2, [r3, #16]
 8002c7e:	e05f      	b.n	8002d40 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002c80:	897b      	ldrh	r3, [r7, #10]
 8002c82:	11db      	asrs	r3, r3, #7
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	f003 0306 	and.w	r3, r3, #6
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f063 030f 	orn	r3, r3, #15
 8002c90:	b2da      	uxtb	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	4930      	ldr	r1, [pc, #192]	; (8002d60 <I2C_MasterRequestRead+0x194>)
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 f8dc 	bl	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e054      	b.n	8002d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	b2da      	uxtb	r2, r3
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	687a      	ldr	r2, [r7, #4]
 8002cbc:	4929      	ldr	r1, [pc, #164]	; (8002d64 <I2C_MasterRequestRead+0x198>)
 8002cbe:	68f8      	ldr	r0, [r7, #12]
 8002cc0:	f000 f8cc 	bl	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e044      	b.n	8002d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	613b      	str	r3, [r7, #16]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	695b      	ldr	r3, [r3, #20]
 8002cd8:	613b      	str	r3, [r7, #16]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681a      	ldr	r2, [r3, #0]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cf2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 f831 	bl	8002d68 <I2C_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00d      	beq.n	8002d28 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1a:	d103      	bne.n	8002d24 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d22:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e017      	b.n	8002d58 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002d28:	897b      	ldrh	r3, [r7, #10]
 8002d2a:	11db      	asrs	r3, r3, #7
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	f003 0306 	and.w	r3, r3, #6
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	f063 030e 	orn	r3, r3, #14
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	4907      	ldr	r1, [pc, #28]	; (8002d64 <I2C_MasterRequestRead+0x198>)
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f888 	bl	8002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d001      	beq.n	8002d56 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e000      	b.n	8002d58 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002d56:	2300      	movs	r3, #0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3718      	adds	r7, #24
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	00010008 	.word	0x00010008
 8002d64:	00010002 	.word	0x00010002

08002d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	60f8      	str	r0, [r7, #12]
 8002d70:	60b9      	str	r1, [r7, #8]
 8002d72:	603b      	str	r3, [r7, #0]
 8002d74:	4613      	mov	r3, r2
 8002d76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d78:	e048      	b.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d80:	d044      	beq.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d82:	f7fe ff7b 	bl	8001c7c <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d302      	bcc.n	8002d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d139      	bne.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	0c1b      	lsrs	r3, r3, #16
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d10d      	bne.n	8002dbe <I2C_WaitOnFlagUntilTimeout+0x56>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695b      	ldr	r3, [r3, #20]
 8002da8:	43da      	mvns	r2, r3
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	4013      	ands	r3, r2
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	bf0c      	ite	eq
 8002db4:	2301      	moveq	r3, #1
 8002db6:	2300      	movne	r3, #0
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	461a      	mov	r2, r3
 8002dbc:	e00c      	b.n	8002dd8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	699b      	ldr	r3, [r3, #24]
 8002dc4:	43da      	mvns	r2, r3
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	4013      	ands	r3, r2
 8002dca:	b29b      	uxth	r3, r3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	79fb      	ldrb	r3, [r7, #7]
 8002dda:	429a      	cmp	r2, r3
 8002ddc:	d116      	bne.n	8002e0c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2220      	movs	r2, #32
 8002de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df8:	f043 0220 	orr.w	r2, r3, #32
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e023      	b.n	8002e54 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	0c1b      	lsrs	r3, r3, #16
 8002e10:	b2db      	uxtb	r3, r3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d10d      	bne.n	8002e32 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	43da      	mvns	r2, r3
 8002e1e:	68bb      	ldr	r3, [r7, #8]
 8002e20:	4013      	ands	r3, r2
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	bf0c      	ite	eq
 8002e28:	2301      	moveq	r3, #1
 8002e2a:	2300      	movne	r3, #0
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	e00c      	b.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	43da      	mvns	r2, r3
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bf0c      	ite	eq
 8002e44:	2301      	moveq	r3, #1
 8002e46:	2300      	movne	r3, #0
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d093      	beq.n	8002d7a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3710      	adds	r7, #16
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
 8002e68:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e6a:	e071      	b.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e7a:	d123      	bne.n	8002ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681a      	ldr	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e8a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb0:	f043 0204 	orr.w	r2, r3, #4
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	e067      	b.n	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eca:	d041      	beq.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ecc:	f7fe fed6 	bl	8001c7c <HAL_GetTick>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	1ad3      	subs	r3, r2, r3
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d302      	bcc.n	8002ee2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d136      	bne.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	0c1b      	lsrs	r3, r3, #16
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d10c      	bne.n	8002f06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	695b      	ldr	r3, [r3, #20]
 8002ef2:	43da      	mvns	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e00b      	b.n	8002f1e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	699b      	ldr	r3, [r3, #24]
 8002f0c:	43da      	mvns	r2, r3
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	4013      	ands	r3, r2
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bf14      	ite	ne
 8002f18:	2301      	movne	r3, #1
 8002f1a:	2300      	moveq	r3, #0
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d016      	beq.n	8002f50 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2220      	movs	r2, #32
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2200      	movs	r2, #0
 8002f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	f043 0220 	orr.w	r2, r3, #32
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e021      	b.n	8002f94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	0c1b      	lsrs	r3, r3, #16
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d10c      	bne.n	8002f74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695b      	ldr	r3, [r3, #20]
 8002f60:	43da      	mvns	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	4013      	ands	r3, r2
 8002f66:	b29b      	uxth	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	bf14      	ite	ne
 8002f6c:	2301      	movne	r3, #1
 8002f6e:	2300      	moveq	r3, #0
 8002f70:	b2db      	uxtb	r3, r3
 8002f72:	e00b      	b.n	8002f8c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	43da      	mvns	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4013      	ands	r3, r2
 8002f80:	b29b      	uxth	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	bf14      	ite	ne
 8002f86:	2301      	movne	r3, #1
 8002f88:	2300      	moveq	r3, #0
 8002f8a:	b2db      	uxtb	r3, r3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	f47f af6d 	bne.w	8002e6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3710      	adds	r7, #16
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002fa8:	e034      	b.n	8003014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002faa:	68f8      	ldr	r0, [r7, #12]
 8002fac:	f000 f8e3 	bl	8003176 <I2C_IsAcknowledgeFailed>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d001      	beq.n	8002fba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e034      	b.n	8003024 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc0:	d028      	beq.n	8003014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc2:	f7fe fe5b 	bl	8001c7c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	68ba      	ldr	r2, [r7, #8]
 8002fce:	429a      	cmp	r2, r3
 8002fd0:	d302      	bcc.n	8002fd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d11d      	bne.n	8003014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fe2:	2b80      	cmp	r3, #128	; 0x80
 8002fe4:	d016      	beq.n	8003014 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e007      	b.n	8003024 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301e:	2b80      	cmp	r3, #128	; 0x80
 8003020:	d1c3      	bne.n	8002faa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003038:	e034      	b.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 f89b 	bl	8003176 <I2C_IsAcknowledgeFailed>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e034      	b.n	80030b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d028      	beq.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003052:	f7fe fe13 	bl	8001c7c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	429a      	cmp	r2, r3
 8003060:	d302      	bcc.n	8003068 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d11d      	bne.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	2b04      	cmp	r3, #4
 8003074:	d016      	beq.n	80030a4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2220      	movs	r2, #32
 8003080:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	f043 0220 	orr.w	r2, r3, #32
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	e007      	b.n	80030b4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	f003 0304 	and.w	r3, r3, #4
 80030ae:	2b04      	cmp	r3, #4
 80030b0:	d1c3      	bne.n	800303a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030b2:	2300      	movs	r3, #0
}
 80030b4:	4618      	mov	r0, r3
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}

080030bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c8:	e049      	b.n	800315e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	695b      	ldr	r3, [r3, #20]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b10      	cmp	r3, #16
 80030d6:	d119      	bne.n	800310c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f06f 0210 	mvn.w	r2, #16
 80030e0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	2200      	movs	r2, #0
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e030      	b.n	800316e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800310c:	f7fe fdb6 	bl	8001c7c <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	429a      	cmp	r2, r3
 800311a:	d302      	bcc.n	8003122 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d11d      	bne.n	800315e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	695b      	ldr	r3, [r3, #20]
 8003128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800312c:	2b40      	cmp	r3, #64	; 0x40
 800312e:	d016      	beq.n	800315e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e007      	b.n	800316e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d1ae      	bne.n	80030ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800318c:	d11b      	bne.n	80031c6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003196:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2200      	movs	r2, #0
 800319c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2220      	movs	r2, #32
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f043 0204 	orr.w	r2, r3, #4
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e000      	b.n	80031c8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031c6:	2300      	movs	r3, #0
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	370c      	adds	r7, #12
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e267      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d075      	beq.n	80032de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031f2:	4b88      	ldr	r3, [pc, #544]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 030c 	and.w	r3, r3, #12
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d00c      	beq.n	8003218 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031fe:	4b85      	ldr	r3, [pc, #532]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003206:	2b08      	cmp	r3, #8
 8003208:	d112      	bne.n	8003230 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800320a:	4b82      	ldr	r3, [pc, #520]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003212:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003216:	d10b      	bne.n	8003230 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003218:	4b7e      	ldr	r3, [pc, #504]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d05b      	beq.n	80032dc <HAL_RCC_OscConfig+0x108>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d157      	bne.n	80032dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e242      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003238:	d106      	bne.n	8003248 <HAL_RCC_OscConfig+0x74>
 800323a:	4b76      	ldr	r3, [pc, #472]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a75      	ldr	r2, [pc, #468]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003240:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	e01d      	b.n	8003284 <HAL_RCC_OscConfig+0xb0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003250:	d10c      	bne.n	800326c <HAL_RCC_OscConfig+0x98>
 8003252:	4b70      	ldr	r3, [pc, #448]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a6f      	ldr	r2, [pc, #444]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003258:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800325c:	6013      	str	r3, [r2, #0]
 800325e:	4b6d      	ldr	r3, [pc, #436]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a6c      	ldr	r2, [pc, #432]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003264:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003268:	6013      	str	r3, [r2, #0]
 800326a:	e00b      	b.n	8003284 <HAL_RCC_OscConfig+0xb0>
 800326c:	4b69      	ldr	r3, [pc, #420]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a68      	ldr	r2, [pc, #416]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003272:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003276:	6013      	str	r3, [r2, #0]
 8003278:	4b66      	ldr	r3, [pc, #408]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 800327e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003282:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d013      	beq.n	80032b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328c:	f7fe fcf6 	bl	8001c7c <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe fcf2 	bl	8001c7c <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e207      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a6:	4b5b      	ldr	r3, [pc, #364]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d0f0      	beq.n	8003294 <HAL_RCC_OscConfig+0xc0>
 80032b2:	e014      	b.n	80032de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b4:	f7fe fce2 	bl	8001c7c <HAL_GetTick>
 80032b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ba:	e008      	b.n	80032ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032bc:	f7fe fcde 	bl	8001c7c <HAL_GetTick>
 80032c0:	4602      	mov	r2, r0
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	1ad3      	subs	r3, r2, r3
 80032c6:	2b64      	cmp	r3, #100	; 0x64
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e1f3      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ce:	4b51      	ldr	r3, [pc, #324]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d1f0      	bne.n	80032bc <HAL_RCC_OscConfig+0xe8>
 80032da:	e000      	b.n	80032de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d063      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ea:	4b4a      	ldr	r3, [pc, #296]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f003 030c 	and.w	r3, r3, #12
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f6:	4b47      	ldr	r3, [pc, #284]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d11c      	bne.n	800333c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003302:	4b44      	ldr	r3, [pc, #272]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800330a:	2b00      	cmp	r3, #0
 800330c:	d116      	bne.n	800333c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330e:	4b41      	ldr	r3, [pc, #260]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d005      	beq.n	8003326 <HAL_RCC_OscConfig+0x152>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d001      	beq.n	8003326 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e1c7      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003326:	4b3b      	ldr	r3, [pc, #236]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	691b      	ldr	r3, [r3, #16]
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4937      	ldr	r1, [pc, #220]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003336:	4313      	orrs	r3, r2
 8003338:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800333a:	e03a      	b.n	80033b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d020      	beq.n	8003386 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003344:	4b34      	ldr	r3, [pc, #208]	; (8003418 <HAL_RCC_OscConfig+0x244>)
 8003346:	2201      	movs	r2, #1
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334a:	f7fe fc97 	bl	8001c7c <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003352:	f7fe fc93 	bl	8001c7c <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e1a8      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003364:	4b2b      	ldr	r3, [pc, #172]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0302 	and.w	r3, r3, #2
 800336c:	2b00      	cmp	r3, #0
 800336e:	d0f0      	beq.n	8003352 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003370:	4b28      	ldr	r3, [pc, #160]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	691b      	ldr	r3, [r3, #16]
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4925      	ldr	r1, [pc, #148]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 8003380:	4313      	orrs	r3, r2
 8003382:	600b      	str	r3, [r1, #0]
 8003384:	e015      	b.n	80033b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003386:	4b24      	ldr	r3, [pc, #144]	; (8003418 <HAL_RCC_OscConfig+0x244>)
 8003388:	2200      	movs	r2, #0
 800338a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800338c:	f7fe fc76 	bl	8001c7c <HAL_GetTick>
 8003390:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003392:	e008      	b.n	80033a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003394:	f7fe fc72 	bl	8001c7c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1ad3      	subs	r3, r2, r3
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d901      	bls.n	80033a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80033a2:	2303      	movs	r3, #3
 80033a4:	e187      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d1f0      	bne.n	8003394 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d036      	beq.n	800342c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	695b      	ldr	r3, [r3, #20]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d016      	beq.n	80033f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c6:	4b15      	ldr	r3, [pc, #84]	; (800341c <HAL_RCC_OscConfig+0x248>)
 80033c8:	2201      	movs	r2, #1
 80033ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033cc:	f7fe fc56 	bl	8001c7c <HAL_GetTick>
 80033d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d2:	e008      	b.n	80033e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033d4:	f7fe fc52 	bl	8001c7c <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d901      	bls.n	80033e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e167      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e6:	4b0b      	ldr	r3, [pc, #44]	; (8003414 <HAL_RCC_OscConfig+0x240>)
 80033e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d0f0      	beq.n	80033d4 <HAL_RCC_OscConfig+0x200>
 80033f2:	e01b      	b.n	800342c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_OscConfig+0x248>)
 80033f6:	2200      	movs	r2, #0
 80033f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fa:	f7fe fc3f 	bl	8001c7c <HAL_GetTick>
 80033fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	e00e      	b.n	8003420 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003402:	f7fe fc3b 	bl	8001c7c <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	2b02      	cmp	r3, #2
 800340e:	d907      	bls.n	8003420 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003410:	2303      	movs	r3, #3
 8003412:	e150      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
 8003414:	40023800 	.word	0x40023800
 8003418:	42470000 	.word	0x42470000
 800341c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003420:	4b88      	ldr	r3, [pc, #544]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 8003422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d1ea      	bne.n	8003402 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8097 	beq.w	8003568 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343a:	2300      	movs	r3, #0
 800343c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800343e:	4b81      	ldr	r3, [pc, #516]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10f      	bne.n	800346a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344a:	2300      	movs	r3, #0
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	4b7d      	ldr	r3, [pc, #500]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 8003450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003452:	4a7c      	ldr	r2, [pc, #496]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	6413      	str	r3, [r2, #64]	; 0x40
 800345a:	4b7a      	ldr	r3, [pc, #488]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 800345c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b77      	ldr	r3, [pc, #476]	; (8003648 <HAL_RCC_OscConfig+0x474>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b74      	ldr	r3, [pc, #464]	; (8003648 <HAL_RCC_OscConfig+0x474>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a73      	ldr	r2, [pc, #460]	; (8003648 <HAL_RCC_OscConfig+0x474>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fe fbfb 	bl	8001c7c <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fe fbf7 	bl	8001c7c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b02      	cmp	r3, #2
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e10c      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4b6a      	ldr	r3, [pc, #424]	; (8003648 <HAL_RCC_OscConfig+0x474>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x2ea>
 80034b0:	4b64      	ldr	r3, [pc, #400]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b4:	4a63      	ldr	r2, [pc, #396]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6713      	str	r3, [r2, #112]	; 0x70
 80034bc:	e01c      	b.n	80034f8 <HAL_RCC_OscConfig+0x324>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	2b05      	cmp	r3, #5
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x30c>
 80034c6:	4b5f      	ldr	r3, [pc, #380]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ca:	4a5e      	ldr	r2, [pc, #376]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034cc:	f043 0304 	orr.w	r3, r3, #4
 80034d0:	6713      	str	r3, [r2, #112]	; 0x70
 80034d2:	4b5c      	ldr	r3, [pc, #368]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	4a5b      	ldr	r2, [pc, #364]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 0301 	orr.w	r3, r3, #1
 80034dc:	6713      	str	r3, [r2, #112]	; 0x70
 80034de:	e00b      	b.n	80034f8 <HAL_RCC_OscConfig+0x324>
 80034e0:	4b58      	ldr	r3, [pc, #352]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e4:	4a57      	ldr	r2, [pc, #348]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034e6:	f023 0301 	bic.w	r3, r3, #1
 80034ea:	6713      	str	r3, [r2, #112]	; 0x70
 80034ec:	4b55      	ldr	r3, [pc, #340]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f0:	4a54      	ldr	r2, [pc, #336]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80034f2:	f023 0304 	bic.w	r3, r3, #4
 80034f6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d015      	beq.n	800352c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fe fbbc 	bl	8001c7c <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	e00a      	b.n	800351e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003508:	f7fe fbb8 	bl	8001c7c <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	f241 3288 	movw	r2, #5000	; 0x1388
 8003516:	4293      	cmp	r3, r2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e0cb      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800351e:	4b49      	ldr	r3, [pc, #292]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 8003520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003522:	f003 0302 	and.w	r3, r3, #2
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0ee      	beq.n	8003508 <HAL_RCC_OscConfig+0x334>
 800352a:	e014      	b.n	8003556 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352c:	f7fe fba6 	bl	8001c7c <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	e00a      	b.n	800354a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003534:	f7fe fba2 	bl	8001c7c <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003542:	4293      	cmp	r3, r2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e0b5      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800354a:	4b3e      	ldr	r3, [pc, #248]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1ee      	bne.n	8003534 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003556:	7dfb      	ldrb	r3, [r7, #23]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d105      	bne.n	8003568 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800355c:	4b39      	ldr	r3, [pc, #228]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	4a38      	ldr	r2, [pc, #224]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 8003562:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003566:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	699b      	ldr	r3, [r3, #24]
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80a1 	beq.w	80036b4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003572:	4b34      	ldr	r3, [pc, #208]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f003 030c 	and.w	r3, r3, #12
 800357a:	2b08      	cmp	r3, #8
 800357c:	d05c      	beq.n	8003638 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	2b02      	cmp	r3, #2
 8003584:	d141      	bne.n	800360a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003586:	4b31      	ldr	r3, [pc, #196]	; (800364c <HAL_RCC_OscConfig+0x478>)
 8003588:	2200      	movs	r2, #0
 800358a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800358c:	f7fe fb76 	bl	8001c7c <HAL_GetTick>
 8003590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003592:	e008      	b.n	80035a6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003594:	f7fe fb72 	bl	8001c7c <HAL_GetTick>
 8003598:	4602      	mov	r2, r0
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	1ad3      	subs	r3, r2, r3
 800359e:	2b02      	cmp	r3, #2
 80035a0:	d901      	bls.n	80035a6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80035a2:	2303      	movs	r3, #3
 80035a4:	e087      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035a6:	4b27      	ldr	r3, [pc, #156]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1f0      	bne.n	8003594 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69da      	ldr	r2, [r3, #28]
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a1b      	ldr	r3, [r3, #32]
 80035ba:	431a      	orrs	r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c0:	019b      	lsls	r3, r3, #6
 80035c2:	431a      	orrs	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c8:	085b      	lsrs	r3, r3, #1
 80035ca:	3b01      	subs	r3, #1
 80035cc:	041b      	lsls	r3, r3, #16
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d4:	061b      	lsls	r3, r3, #24
 80035d6:	491b      	ldr	r1, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80035d8:	4313      	orrs	r3, r2
 80035da:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035dc:	4b1b      	ldr	r3, [pc, #108]	; (800364c <HAL_RCC_OscConfig+0x478>)
 80035de:	2201      	movs	r2, #1
 80035e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e2:	f7fe fb4b 	bl	8001c7c <HAL_GetTick>
 80035e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e8:	e008      	b.n	80035fc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ea:	f7fe fb47 	bl	8001c7c <HAL_GetTick>
 80035ee:	4602      	mov	r2, r0
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	1ad3      	subs	r3, r2, r3
 80035f4:	2b02      	cmp	r3, #2
 80035f6:	d901      	bls.n	80035fc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e05c      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fc:	4b11      	ldr	r3, [pc, #68]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0f0      	beq.n	80035ea <HAL_RCC_OscConfig+0x416>
 8003608:	e054      	b.n	80036b4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b10      	ldr	r3, [pc, #64]	; (800364c <HAL_RCC_OscConfig+0x478>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fb34 	bl	8001c7c <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe fb30 	bl	8001c7c <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e045      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_RCC_OscConfig+0x470>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x444>
 8003636:	e03d      	b.n	80036b4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d107      	bne.n	8003650 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	e038      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
 8003644:	40023800 	.word	0x40023800
 8003648:	40007000 	.word	0x40007000
 800364c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <HAL_RCC_OscConfig+0x4ec>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d028      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003668:	429a      	cmp	r2, r3
 800366a:	d121      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003676:	429a      	cmp	r2, r3
 8003678:	d11a      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367a:	68fa      	ldr	r2, [r7, #12]
 800367c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003680:	4013      	ands	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003686:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003688:	4293      	cmp	r3, r2
 800368a:	d111      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	3b01      	subs	r3, #1
 800369a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800369c:	429a      	cmp	r2, r3
 800369e:	d107      	bne.n	80036b0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036aa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d001      	beq.n	80036b4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e000      	b.n	80036b6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80036b4:	2300      	movs	r3, #0
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	40023800 	.word	0x40023800

080036c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d101      	bne.n	80036d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	e0cc      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036d8:	4b68      	ldr	r3, [pc, #416]	; (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f003 0307 	and.w	r3, r3, #7
 80036e0:	683a      	ldr	r2, [r7, #0]
 80036e2:	429a      	cmp	r2, r3
 80036e4:	d90c      	bls.n	8003700 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036e6:	4b65      	ldr	r3, [pc, #404]	; (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	b2d2      	uxtb	r2, r2
 80036ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ee:	4b63      	ldr	r3, [pc, #396]	; (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0307 	and.w	r3, r3, #7
 80036f6:	683a      	ldr	r2, [r7, #0]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d001      	beq.n	8003700 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0b8      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d020      	beq.n	800374e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0304 	and.w	r3, r3, #4
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003718:	4b59      	ldr	r3, [pc, #356]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a58      	ldr	r2, [pc, #352]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003722:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d005      	beq.n	800373c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	4a52      	ldr	r2, [pc, #328]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800373a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800373c:	4b50      	ldr	r3, [pc, #320]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	494d      	ldr	r1, [pc, #308]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800374a:	4313      	orrs	r3, r2
 800374c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0301 	and.w	r3, r3, #1
 8003756:	2b00      	cmp	r3, #0
 8003758:	d044      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b01      	cmp	r3, #1
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003762:	4b47      	ldr	r3, [pc, #284]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d119      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e07f      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d003      	beq.n	8003782 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800377e:	2b03      	cmp	r3, #3
 8003780:	d107      	bne.n	8003792 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003782:	4b3f      	ldr	r3, [pc, #252]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d109      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e06f      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003792:	4b3b      	ldr	r3, [pc, #236]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0302 	and.w	r3, r3, #2
 800379a:	2b00      	cmp	r3, #0
 800379c:	d101      	bne.n	80037a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e067      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037a2:	4b37      	ldr	r3, [pc, #220]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f023 0203 	bic.w	r2, r3, #3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	4934      	ldr	r1, [pc, #208]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 80037b0:	4313      	orrs	r3, r2
 80037b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037b4:	f7fe fa62 	bl	8001c7c <HAL_GetTick>
 80037b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	e00a      	b.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037bc:	f7fe fa5e 	bl	8001c7c <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e04f      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037d2:	4b2b      	ldr	r3, [pc, #172]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f003 020c 	and.w	r2, r3, #12
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d1eb      	bne.n	80037bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037e4:	4b25      	ldr	r3, [pc, #148]	; (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0307 	and.w	r3, r3, #7
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d20c      	bcs.n	800380c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f2:	4b22      	ldr	r3, [pc, #136]	; (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037fa:	4b20      	ldr	r3, [pc, #128]	; (800387c <HAL_RCC_ClockConfig+0x1b8>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	429a      	cmp	r2, r3
 8003806:	d001      	beq.n	800380c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e032      	b.n	8003872 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0304 	and.w	r3, r3, #4
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003818:	4b19      	ldr	r3, [pc, #100]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	68db      	ldr	r3, [r3, #12]
 8003824:	4916      	ldr	r1, [pc, #88]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d009      	beq.n	800384a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003838:	689b      	ldr	r3, [r3, #8]
 800383a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	691b      	ldr	r3, [r3, #16]
 8003842:	00db      	lsls	r3, r3, #3
 8003844:	490e      	ldr	r1, [pc, #56]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003846:	4313      	orrs	r3, r2
 8003848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800384a:	f000 f821 	bl	8003890 <HAL_RCC_GetSysClockFreq>
 800384e:	4602      	mov	r2, r0
 8003850:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	091b      	lsrs	r3, r3, #4
 8003856:	f003 030f 	and.w	r3, r3, #15
 800385a:	490a      	ldr	r1, [pc, #40]	; (8003884 <HAL_RCC_ClockConfig+0x1c0>)
 800385c:	5ccb      	ldrb	r3, [r1, r3]
 800385e:	fa22 f303 	lsr.w	r3, r2, r3
 8003862:	4a09      	ldr	r2, [pc, #36]	; (8003888 <HAL_RCC_ClockConfig+0x1c4>)
 8003864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003866:	4b09      	ldr	r3, [pc, #36]	; (800388c <HAL_RCC_ClockConfig+0x1c8>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fe f9c2 	bl	8001bf4 <HAL_InitTick>

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40023c00 	.word	0x40023c00
 8003880:	40023800 	.word	0x40023800
 8003884:	08004bf8 	.word	0x08004bf8
 8003888:	20000004 	.word	0x20000004
 800388c:	20000008 	.word	0x20000008

08003890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003894:	b094      	sub	sp, #80	; 0x50
 8003896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	647b      	str	r3, [r7, #68]	; 0x44
 800389c:	2300      	movs	r3, #0
 800389e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038a0:	2300      	movs	r3, #0
 80038a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80038a4:	2300      	movs	r3, #0
 80038a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038a8:	4b79      	ldr	r3, [pc, #484]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 030c 	and.w	r3, r3, #12
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d00d      	beq.n	80038d0 <HAL_RCC_GetSysClockFreq+0x40>
 80038b4:	2b08      	cmp	r3, #8
 80038b6:	f200 80e1 	bhi.w	8003a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x34>
 80038be:	2b04      	cmp	r3, #4
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x3a>
 80038c2:	e0db      	b.n	8003a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038c4:	4b73      	ldr	r3, [pc, #460]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80038c6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80038c8:	e0db      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038ca:	4b73      	ldr	r3, [pc, #460]	; (8003a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80038cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80038ce:	e0d8      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038d0:	4b6f      	ldr	r3, [pc, #444]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038d8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038da:	4b6d      	ldr	r3, [pc, #436]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d063      	beq.n	80039ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038e6:	4b6a      	ldr	r3, [pc, #424]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	099b      	lsrs	r3, r3, #6
 80038ec:	2200      	movs	r2, #0
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80038f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80038f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80038f8:	633b      	str	r3, [r7, #48]	; 0x30
 80038fa:	2300      	movs	r3, #0
 80038fc:	637b      	str	r3, [r7, #52]	; 0x34
 80038fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003902:	4622      	mov	r2, r4
 8003904:	462b      	mov	r3, r5
 8003906:	f04f 0000 	mov.w	r0, #0
 800390a:	f04f 0100 	mov.w	r1, #0
 800390e:	0159      	lsls	r1, r3, #5
 8003910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003914:	0150      	lsls	r0, r2, #5
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4621      	mov	r1, r4
 800391c:	1a51      	subs	r1, r2, r1
 800391e:	6139      	str	r1, [r7, #16]
 8003920:	4629      	mov	r1, r5
 8003922:	eb63 0301 	sbc.w	r3, r3, r1
 8003926:	617b      	str	r3, [r7, #20]
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003934:	4659      	mov	r1, fp
 8003936:	018b      	lsls	r3, r1, #6
 8003938:	4651      	mov	r1, sl
 800393a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800393e:	4651      	mov	r1, sl
 8003940:	018a      	lsls	r2, r1, #6
 8003942:	4651      	mov	r1, sl
 8003944:	ebb2 0801 	subs.w	r8, r2, r1
 8003948:	4659      	mov	r1, fp
 800394a:	eb63 0901 	sbc.w	r9, r3, r1
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800395a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800395e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003962:	4690      	mov	r8, r2
 8003964:	4699      	mov	r9, r3
 8003966:	4623      	mov	r3, r4
 8003968:	eb18 0303 	adds.w	r3, r8, r3
 800396c:	60bb      	str	r3, [r7, #8]
 800396e:	462b      	mov	r3, r5
 8003970:	eb49 0303 	adc.w	r3, r9, r3
 8003974:	60fb      	str	r3, [r7, #12]
 8003976:	f04f 0200 	mov.w	r2, #0
 800397a:	f04f 0300 	mov.w	r3, #0
 800397e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003982:	4629      	mov	r1, r5
 8003984:	024b      	lsls	r3, r1, #9
 8003986:	4621      	mov	r1, r4
 8003988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800398c:	4621      	mov	r1, r4
 800398e:	024a      	lsls	r2, r1, #9
 8003990:	4610      	mov	r0, r2
 8003992:	4619      	mov	r1, r3
 8003994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003996:	2200      	movs	r2, #0
 8003998:	62bb      	str	r3, [r7, #40]	; 0x28
 800399a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800399c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80039a0:	f7fd f860 	bl	8000a64 <__aeabi_uldivmod>
 80039a4:	4602      	mov	r2, r0
 80039a6:	460b      	mov	r3, r1
 80039a8:	4613      	mov	r3, r2
 80039aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039ac:	e058      	b.n	8003a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039ae:	4b38      	ldr	r3, [pc, #224]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	099b      	lsrs	r3, r3, #6
 80039b4:	2200      	movs	r2, #0
 80039b6:	4618      	mov	r0, r3
 80039b8:	4611      	mov	r1, r2
 80039ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80039be:	623b      	str	r3, [r7, #32]
 80039c0:	2300      	movs	r3, #0
 80039c2:	627b      	str	r3, [r7, #36]	; 0x24
 80039c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80039c8:	4642      	mov	r2, r8
 80039ca:	464b      	mov	r3, r9
 80039cc:	f04f 0000 	mov.w	r0, #0
 80039d0:	f04f 0100 	mov.w	r1, #0
 80039d4:	0159      	lsls	r1, r3, #5
 80039d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039da:	0150      	lsls	r0, r2, #5
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4641      	mov	r1, r8
 80039e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80039e6:	4649      	mov	r1, r9
 80039e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80039ec:	f04f 0200 	mov.w	r2, #0
 80039f0:	f04f 0300 	mov.w	r3, #0
 80039f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80039f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80039fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a00:	ebb2 040a 	subs.w	r4, r2, sl
 8003a04:	eb63 050b 	sbc.w	r5, r3, fp
 8003a08:	f04f 0200 	mov.w	r2, #0
 8003a0c:	f04f 0300 	mov.w	r3, #0
 8003a10:	00eb      	lsls	r3, r5, #3
 8003a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a16:	00e2      	lsls	r2, r4, #3
 8003a18:	4614      	mov	r4, r2
 8003a1a:	461d      	mov	r5, r3
 8003a1c:	4643      	mov	r3, r8
 8003a1e:	18e3      	adds	r3, r4, r3
 8003a20:	603b      	str	r3, [r7, #0]
 8003a22:	464b      	mov	r3, r9
 8003a24:	eb45 0303 	adc.w	r3, r5, r3
 8003a28:	607b      	str	r3, [r7, #4]
 8003a2a:	f04f 0200 	mov.w	r2, #0
 8003a2e:	f04f 0300 	mov.w	r3, #0
 8003a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003a36:	4629      	mov	r1, r5
 8003a38:	028b      	lsls	r3, r1, #10
 8003a3a:	4621      	mov	r1, r4
 8003a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003a40:	4621      	mov	r1, r4
 8003a42:	028a      	lsls	r2, r1, #10
 8003a44:	4610      	mov	r0, r2
 8003a46:	4619      	mov	r1, r3
 8003a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
 8003a4e:	61fa      	str	r2, [r7, #28]
 8003a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a54:	f7fd f806 	bl	8000a64 <__aeabi_uldivmod>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a60:	4b0b      	ldr	r3, [pc, #44]	; (8003a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	0c1b      	lsrs	r3, r3, #16
 8003a66:	f003 0303 	and.w	r3, r3, #3
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a7a:	e002      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003a7c:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3750      	adds	r7, #80	; 0x50
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a8e:	bf00      	nop
 8003a90:	40023800 	.word	0x40023800
 8003a94:	00f42400 	.word	0x00f42400
 8003a98:	007a1200 	.word	0x007a1200

08003a9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003aa0:	4b03      	ldr	r3, [pc, #12]	; (8003ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aac:	4770      	bx	lr
 8003aae:	bf00      	nop
 8003ab0:	20000004 	.word	0x20000004

08003ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ab8:	f7ff fff0 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003abc:	4602      	mov	r2, r0
 8003abe:	4b05      	ldr	r3, [pc, #20]	; (8003ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	0a9b      	lsrs	r3, r3, #10
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	4903      	ldr	r1, [pc, #12]	; (8003ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aca:	5ccb      	ldrb	r3, [r1, r3]
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40023800 	.word	0x40023800
 8003ad8:	08004c08 	.word	0x08004c08

08003adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ae0:	f7ff ffdc 	bl	8003a9c <HAL_RCC_GetHCLKFreq>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	4b05      	ldr	r3, [pc, #20]	; (8003afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	0b5b      	lsrs	r3, r3, #13
 8003aec:	f003 0307 	and.w	r3, r3, #7
 8003af0:	4903      	ldr	r1, [pc, #12]	; (8003b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003af2:	5ccb      	ldrb	r3, [r1, r3]
 8003af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	40023800 	.word	0x40023800
 8003b00:	08004c08 	.word	0x08004c08

08003b04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b082      	sub	sp, #8
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e042      	b.n	8003b9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d106      	bne.n	8003b30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f7fd ffce 	bl	8001acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2224      	movs	r2, #36	; 0x24
 8003b34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f973 	bl	8003e34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	691a      	ldr	r2, [r3, #16]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68da      	ldr	r2, [r3, #12]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2220      	movs	r2, #32
 8003b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2200      	movs	r2, #0
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b08a      	sub	sp, #40	; 0x28
 8003ba8:	af02      	add	r7, sp, #8
 8003baa:	60f8      	str	r0, [r7, #12]
 8003bac:	60b9      	str	r1, [r7, #8]
 8003bae:	603b      	str	r3, [r7, #0]
 8003bb0:	4613      	mov	r3, r2
 8003bb2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bbe:	b2db      	uxtb	r3, r3
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d175      	bne.n	8003cb0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d002      	beq.n	8003bd0 <HAL_UART_Transmit+0x2c>
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e06e      	b.n	8003cb2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2221      	movs	r2, #33	; 0x21
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003be2:	f7fe f84b 	bl	8001c7c <HAL_GetTick>
 8003be6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	88fa      	ldrh	r2, [r7, #6]
 8003bec:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	88fa      	ldrh	r2, [r7, #6]
 8003bf2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689b      	ldr	r3, [r3, #8]
 8003bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfc:	d108      	bne.n	8003c10 <HAL_UART_Transmit+0x6c>
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d104      	bne.n	8003c10 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003c06:	2300      	movs	r3, #0
 8003c08:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	61bb      	str	r3, [r7, #24]
 8003c0e:	e003      	b.n	8003c18 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c14:	2300      	movs	r3, #0
 8003c16:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003c18:	e02e      	b.n	8003c78 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2200      	movs	r2, #0
 8003c22:	2180      	movs	r1, #128	; 0x80
 8003c24:	68f8      	ldr	r0, [r7, #12]
 8003c26:	f000 f848 	bl	8003cba <UART_WaitOnFlagUntilTimeout>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2220      	movs	r2, #32
 8003c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e03a      	b.n	8003cb2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d10b      	bne.n	8003c5a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c42:	69bb      	ldr	r3, [r7, #24]
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	461a      	mov	r2, r3
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c50:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	3302      	adds	r3, #2
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e007      	b.n	8003c6a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c5a:	69fb      	ldr	r3, [r7, #28]
 8003c5c:	781a      	ldrb	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	3301      	adds	r3, #1
 8003c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	3b01      	subs	r3, #1
 8003c72:	b29a      	uxth	r2, r3
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003c7c:	b29b      	uxth	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d1cb      	bne.n	8003c1a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2140      	movs	r1, #64	; 0x40
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 f814 	bl	8003cba <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d005      	beq.n	8003ca4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8003ca0:	2303      	movs	r3, #3
 8003ca2:	e006      	b.n	8003cb2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	e000      	b.n	8003cb2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003cb0:	2302      	movs	r3, #2
  }
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003cba:	b580      	push	{r7, lr}
 8003cbc:	b086      	sub	sp, #24
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	603b      	str	r3, [r7, #0]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cca:	e03b      	b.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cd2:	d037      	beq.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cd4:	f7fd ffd2 	bl	8001c7c <HAL_GetTick>
 8003cd8:	4602      	mov	r2, r0
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	1ad3      	subs	r3, r2, r3
 8003cde:	6a3a      	ldr	r2, [r7, #32]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d302      	bcc.n	8003cea <UART_WaitOnFlagUntilTimeout+0x30>
 8003ce4:	6a3b      	ldr	r3, [r7, #32]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003cea:	2303      	movs	r3, #3
 8003cec:	e03a      	b.n	8003d64 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d023      	beq.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	2b80      	cmp	r3, #128	; 0x80
 8003d00:	d020      	beq.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	2b40      	cmp	r3, #64	; 0x40
 8003d06:	d01d      	beq.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b08      	cmp	r3, #8
 8003d14:	d116      	bne.n	8003d44 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	617b      	str	r3, [r7, #20]
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 f81d 	bl	8003d6c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2208      	movs	r2, #8
 8003d36:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e00f      	b.n	8003d64 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	4013      	ands	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	bf0c      	ite	eq
 8003d54:	2301      	moveq	r3, #1
 8003d56:	2300      	movne	r3, #0
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d0b4      	beq.n	8003ccc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d62:	2300      	movs	r3, #0
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3718      	adds	r7, #24
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}

08003d6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b095      	sub	sp, #84	; 0x54
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	330c      	adds	r3, #12
 8003d7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7e:	e853 3f00 	ldrex	r3, [r3]
 8003d82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	330c      	adds	r3, #12
 8003d92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d94:	643a      	str	r2, [r7, #64]	; 0x40
 8003d96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d9c:	e841 2300 	strex	r3, r2, [r1]
 8003da0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1e5      	bne.n	8003d74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3314      	adds	r3, #20
 8003dae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db0:	6a3b      	ldr	r3, [r7, #32]
 8003db2:	e853 3f00 	ldrex	r3, [r3]
 8003db6:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	f023 0301 	bic.w	r3, r3, #1
 8003dbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3314      	adds	r3, #20
 8003dc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003dc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003dca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003dce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003dd0:	e841 2300 	strex	r3, r2, [r1]
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d1e5      	bne.n	8003da8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de0:	2b01      	cmp	r3, #1
 8003de2:	d119      	bne.n	8003e18 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	330c      	adds	r3, #12
 8003dea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	e853 3f00 	ldrex	r3, [r3]
 8003df2:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f023 0310 	bic.w	r3, r3, #16
 8003dfa:	647b      	str	r3, [r7, #68]	; 0x44
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	330c      	adds	r3, #12
 8003e02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e04:	61ba      	str	r2, [r7, #24]
 8003e06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e08:	6979      	ldr	r1, [r7, #20]
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	e841 2300 	strex	r3, r2, [r1]
 8003e10:	613b      	str	r3, [r7, #16]
   return(result);
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1e5      	bne.n	8003de4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2220      	movs	r2, #32
 8003e1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e26:	bf00      	nop
 8003e28:	3754      	adds	r7, #84	; 0x54
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
	...

08003e34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e38:	b0c0      	sub	sp, #256	; 0x100
 8003e3a:	af00      	add	r7, sp, #0
 8003e3c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e50:	68d9      	ldr	r1, [r3, #12]
 8003e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	ea40 0301 	orr.w	r3, r0, r1
 8003e5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e62:	689a      	ldr	r2, [r3, #8]
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	431a      	orrs	r2, r3
 8003e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	431a      	orrs	r2, r3
 8003e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e78:	69db      	ldr	r3, [r3, #28]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003e8c:	f021 010c 	bic.w	r1, r1, #12
 8003e90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003e9a:	430b      	orrs	r3, r1
 8003e9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003e9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eae:	6999      	ldr	r1, [r3, #24]
 8003eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	ea40 0301 	orr.w	r3, r0, r1
 8003eba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	4b8f      	ldr	r3, [pc, #572]	; (8004100 <UART_SetConfig+0x2cc>)
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d005      	beq.n	8003ed4 <UART_SetConfig+0xa0>
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b8d      	ldr	r3, [pc, #564]	; (8004104 <UART_SetConfig+0x2d0>)
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d104      	bne.n	8003ede <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ed4:	f7ff fe02 	bl	8003adc <HAL_RCC_GetPCLK2Freq>
 8003ed8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003edc:	e003      	b.n	8003ee6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ede:	f7ff fde9 	bl	8003ab4 <HAL_RCC_GetPCLK1Freq>
 8003ee2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef0:	f040 810c 	bne.w	800410c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003ef4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003efe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003f02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003f06:	4622      	mov	r2, r4
 8003f08:	462b      	mov	r3, r5
 8003f0a:	1891      	adds	r1, r2, r2
 8003f0c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003f0e:	415b      	adcs	r3, r3
 8003f10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003f16:	4621      	mov	r1, r4
 8003f18:	eb12 0801 	adds.w	r8, r2, r1
 8003f1c:	4629      	mov	r1, r5
 8003f1e:	eb43 0901 	adc.w	r9, r3, r1
 8003f22:	f04f 0200 	mov.w	r2, #0
 8003f26:	f04f 0300 	mov.w	r3, #0
 8003f2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f36:	4690      	mov	r8, r2
 8003f38:	4699      	mov	r9, r3
 8003f3a:	4623      	mov	r3, r4
 8003f3c:	eb18 0303 	adds.w	r3, r8, r3
 8003f40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003f44:	462b      	mov	r3, r5
 8003f46:	eb49 0303 	adc.w	r3, r9, r3
 8003f4a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003f5a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003f5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003f62:	460b      	mov	r3, r1
 8003f64:	18db      	adds	r3, r3, r3
 8003f66:	653b      	str	r3, [r7, #80]	; 0x50
 8003f68:	4613      	mov	r3, r2
 8003f6a:	eb42 0303 	adc.w	r3, r2, r3
 8003f6e:	657b      	str	r3, [r7, #84]	; 0x54
 8003f70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003f74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003f78:	f7fc fd74 	bl	8000a64 <__aeabi_uldivmod>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	460b      	mov	r3, r1
 8003f80:	4b61      	ldr	r3, [pc, #388]	; (8004108 <UART_SetConfig+0x2d4>)
 8003f82:	fba3 2302 	umull	r2, r3, r3, r2
 8003f86:	095b      	lsrs	r3, r3, #5
 8003f88:	011c      	lsls	r4, r3, #4
 8003f8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f8e:	2200      	movs	r2, #0
 8003f90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f94:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003f98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	464b      	mov	r3, r9
 8003fa0:	1891      	adds	r1, r2, r2
 8003fa2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003fa4:	415b      	adcs	r3, r3
 8003fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003fac:	4641      	mov	r1, r8
 8003fae:	eb12 0a01 	adds.w	sl, r2, r1
 8003fb2:	4649      	mov	r1, r9
 8003fb4:	eb43 0b01 	adc.w	fp, r3, r1
 8003fb8:	f04f 0200 	mov.w	r2, #0
 8003fbc:	f04f 0300 	mov.w	r3, #0
 8003fc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fcc:	4692      	mov	sl, r2
 8003fce:	469b      	mov	fp, r3
 8003fd0:	4643      	mov	r3, r8
 8003fd2:	eb1a 0303 	adds.w	r3, sl, r3
 8003fd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003fda:	464b      	mov	r3, r9
 8003fdc:	eb4b 0303 	adc.w	r3, fp, r3
 8003fe0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003ff0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003ff4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	18db      	adds	r3, r3, r3
 8003ffc:	643b      	str	r3, [r7, #64]	; 0x40
 8003ffe:	4613      	mov	r3, r2
 8004000:	eb42 0303 	adc.w	r3, r2, r3
 8004004:	647b      	str	r3, [r7, #68]	; 0x44
 8004006:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800400a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800400e:	f7fc fd29 	bl	8000a64 <__aeabi_uldivmod>
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	4611      	mov	r1, r2
 8004018:	4b3b      	ldr	r3, [pc, #236]	; (8004108 <UART_SetConfig+0x2d4>)
 800401a:	fba3 2301 	umull	r2, r3, r3, r1
 800401e:	095b      	lsrs	r3, r3, #5
 8004020:	2264      	movs	r2, #100	; 0x64
 8004022:	fb02 f303 	mul.w	r3, r2, r3
 8004026:	1acb      	subs	r3, r1, r3
 8004028:	00db      	lsls	r3, r3, #3
 800402a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <UART_SetConfig+0x2d4>)
 8004030:	fba3 2302 	umull	r2, r3, r3, r2
 8004034:	095b      	lsrs	r3, r3, #5
 8004036:	005b      	lsls	r3, r3, #1
 8004038:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800403c:	441c      	add	r4, r3
 800403e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004042:	2200      	movs	r2, #0
 8004044:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004048:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800404c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004050:	4642      	mov	r2, r8
 8004052:	464b      	mov	r3, r9
 8004054:	1891      	adds	r1, r2, r2
 8004056:	63b9      	str	r1, [r7, #56]	; 0x38
 8004058:	415b      	adcs	r3, r3
 800405a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800405c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004060:	4641      	mov	r1, r8
 8004062:	1851      	adds	r1, r2, r1
 8004064:	6339      	str	r1, [r7, #48]	; 0x30
 8004066:	4649      	mov	r1, r9
 8004068:	414b      	adcs	r3, r1
 800406a:	637b      	str	r3, [r7, #52]	; 0x34
 800406c:	f04f 0200 	mov.w	r2, #0
 8004070:	f04f 0300 	mov.w	r3, #0
 8004074:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004078:	4659      	mov	r1, fp
 800407a:	00cb      	lsls	r3, r1, #3
 800407c:	4651      	mov	r1, sl
 800407e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004082:	4651      	mov	r1, sl
 8004084:	00ca      	lsls	r2, r1, #3
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	4603      	mov	r3, r0
 800408c:	4642      	mov	r2, r8
 800408e:	189b      	adds	r3, r3, r2
 8004090:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004094:	464b      	mov	r3, r9
 8004096:	460a      	mov	r2, r1
 8004098:	eb42 0303 	adc.w	r3, r2, r3
 800409c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80040a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	2200      	movs	r2, #0
 80040a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80040b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040b4:	460b      	mov	r3, r1
 80040b6:	18db      	adds	r3, r3, r3
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80040ba:	4613      	mov	r3, r2
 80040bc:	eb42 0303 	adc.w	r3, r2, r3
 80040c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80040c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80040ca:	f7fc fccb 	bl	8000a64 <__aeabi_uldivmod>
 80040ce:	4602      	mov	r2, r0
 80040d0:	460b      	mov	r3, r1
 80040d2:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <UART_SetConfig+0x2d4>)
 80040d4:	fba3 1302 	umull	r1, r3, r3, r2
 80040d8:	095b      	lsrs	r3, r3, #5
 80040da:	2164      	movs	r1, #100	; 0x64
 80040dc:	fb01 f303 	mul.w	r3, r1, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	00db      	lsls	r3, r3, #3
 80040e4:	3332      	adds	r3, #50	; 0x32
 80040e6:	4a08      	ldr	r2, [pc, #32]	; (8004108 <UART_SetConfig+0x2d4>)
 80040e8:	fba2 2303 	umull	r2, r3, r2, r3
 80040ec:	095b      	lsrs	r3, r3, #5
 80040ee:	f003 0207 	and.w	r2, r3, #7
 80040f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4422      	add	r2, r4
 80040fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80040fc:	e106      	b.n	800430c <UART_SetConfig+0x4d8>
 80040fe:	bf00      	nop
 8004100:	40011000 	.word	0x40011000
 8004104:	40011400 	.word	0x40011400
 8004108:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800410c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004110:	2200      	movs	r2, #0
 8004112:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004116:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800411a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800411e:	4642      	mov	r2, r8
 8004120:	464b      	mov	r3, r9
 8004122:	1891      	adds	r1, r2, r2
 8004124:	6239      	str	r1, [r7, #32]
 8004126:	415b      	adcs	r3, r3
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
 800412a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800412e:	4641      	mov	r1, r8
 8004130:	1854      	adds	r4, r2, r1
 8004132:	4649      	mov	r1, r9
 8004134:	eb43 0501 	adc.w	r5, r3, r1
 8004138:	f04f 0200 	mov.w	r2, #0
 800413c:	f04f 0300 	mov.w	r3, #0
 8004140:	00eb      	lsls	r3, r5, #3
 8004142:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004146:	00e2      	lsls	r2, r4, #3
 8004148:	4614      	mov	r4, r2
 800414a:	461d      	mov	r5, r3
 800414c:	4643      	mov	r3, r8
 800414e:	18e3      	adds	r3, r4, r3
 8004150:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004154:	464b      	mov	r3, r9
 8004156:	eb45 0303 	adc.w	r3, r5, r3
 800415a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800415e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	2200      	movs	r2, #0
 8004166:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800416a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800417a:	4629      	mov	r1, r5
 800417c:	008b      	lsls	r3, r1, #2
 800417e:	4621      	mov	r1, r4
 8004180:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004184:	4621      	mov	r1, r4
 8004186:	008a      	lsls	r2, r1, #2
 8004188:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800418c:	f7fc fc6a 	bl	8000a64 <__aeabi_uldivmod>
 8004190:	4602      	mov	r2, r0
 8004192:	460b      	mov	r3, r1
 8004194:	4b60      	ldr	r3, [pc, #384]	; (8004318 <UART_SetConfig+0x4e4>)
 8004196:	fba3 2302 	umull	r2, r3, r3, r2
 800419a:	095b      	lsrs	r3, r3, #5
 800419c:	011c      	lsls	r4, r3, #4
 800419e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80041a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80041ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80041b0:	4642      	mov	r2, r8
 80041b2:	464b      	mov	r3, r9
 80041b4:	1891      	adds	r1, r2, r2
 80041b6:	61b9      	str	r1, [r7, #24]
 80041b8:	415b      	adcs	r3, r3
 80041ba:	61fb      	str	r3, [r7, #28]
 80041bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041c0:	4641      	mov	r1, r8
 80041c2:	1851      	adds	r1, r2, r1
 80041c4:	6139      	str	r1, [r7, #16]
 80041c6:	4649      	mov	r1, r9
 80041c8:	414b      	adcs	r3, r1
 80041ca:	617b      	str	r3, [r7, #20]
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041d8:	4659      	mov	r1, fp
 80041da:	00cb      	lsls	r3, r1, #3
 80041dc:	4651      	mov	r1, sl
 80041de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041e2:	4651      	mov	r1, sl
 80041e4:	00ca      	lsls	r2, r1, #3
 80041e6:	4610      	mov	r0, r2
 80041e8:	4619      	mov	r1, r3
 80041ea:	4603      	mov	r3, r0
 80041ec:	4642      	mov	r2, r8
 80041ee:	189b      	adds	r3, r3, r2
 80041f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80041f4:	464b      	mov	r3, r9
 80041f6:	460a      	mov	r2, r1
 80041f8:	eb42 0303 	adc.w	r3, r2, r3
 80041fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	2200      	movs	r2, #0
 8004208:	67bb      	str	r3, [r7, #120]	; 0x78
 800420a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800420c:	f04f 0200 	mov.w	r2, #0
 8004210:	f04f 0300 	mov.w	r3, #0
 8004214:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004218:	4649      	mov	r1, r9
 800421a:	008b      	lsls	r3, r1, #2
 800421c:	4641      	mov	r1, r8
 800421e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004222:	4641      	mov	r1, r8
 8004224:	008a      	lsls	r2, r1, #2
 8004226:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800422a:	f7fc fc1b 	bl	8000a64 <__aeabi_uldivmod>
 800422e:	4602      	mov	r2, r0
 8004230:	460b      	mov	r3, r1
 8004232:	4611      	mov	r1, r2
 8004234:	4b38      	ldr	r3, [pc, #224]	; (8004318 <UART_SetConfig+0x4e4>)
 8004236:	fba3 2301 	umull	r2, r3, r3, r1
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	2264      	movs	r2, #100	; 0x64
 800423e:	fb02 f303 	mul.w	r3, r2, r3
 8004242:	1acb      	subs	r3, r1, r3
 8004244:	011b      	lsls	r3, r3, #4
 8004246:	3332      	adds	r3, #50	; 0x32
 8004248:	4a33      	ldr	r2, [pc, #204]	; (8004318 <UART_SetConfig+0x4e4>)
 800424a:	fba2 2303 	umull	r2, r3, r2, r3
 800424e:	095b      	lsrs	r3, r3, #5
 8004250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004254:	441c      	add	r4, r3
 8004256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800425a:	2200      	movs	r2, #0
 800425c:	673b      	str	r3, [r7, #112]	; 0x70
 800425e:	677a      	str	r2, [r7, #116]	; 0x74
 8004260:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004264:	4642      	mov	r2, r8
 8004266:	464b      	mov	r3, r9
 8004268:	1891      	adds	r1, r2, r2
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	415b      	adcs	r3, r3
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004274:	4641      	mov	r1, r8
 8004276:	1851      	adds	r1, r2, r1
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	4649      	mov	r1, r9
 800427c:	414b      	adcs	r3, r1
 800427e:	607b      	str	r3, [r7, #4]
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800428c:	4659      	mov	r1, fp
 800428e:	00cb      	lsls	r3, r1, #3
 8004290:	4651      	mov	r1, sl
 8004292:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004296:	4651      	mov	r1, sl
 8004298:	00ca      	lsls	r2, r1, #3
 800429a:	4610      	mov	r0, r2
 800429c:	4619      	mov	r1, r3
 800429e:	4603      	mov	r3, r0
 80042a0:	4642      	mov	r2, r8
 80042a2:	189b      	adds	r3, r3, r2
 80042a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80042a6:	464b      	mov	r3, r9
 80042a8:	460a      	mov	r2, r1
 80042aa:	eb42 0303 	adc.w	r3, r2, r3
 80042ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	2200      	movs	r2, #0
 80042b8:	663b      	str	r3, [r7, #96]	; 0x60
 80042ba:	667a      	str	r2, [r7, #100]	; 0x64
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80042c8:	4649      	mov	r1, r9
 80042ca:	008b      	lsls	r3, r1, #2
 80042cc:	4641      	mov	r1, r8
 80042ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042d2:	4641      	mov	r1, r8
 80042d4:	008a      	lsls	r2, r1, #2
 80042d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80042da:	f7fc fbc3 	bl	8000a64 <__aeabi_uldivmod>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	4b0d      	ldr	r3, [pc, #52]	; (8004318 <UART_SetConfig+0x4e4>)
 80042e4:	fba3 1302 	umull	r1, r3, r3, r2
 80042e8:	095b      	lsrs	r3, r3, #5
 80042ea:	2164      	movs	r1, #100	; 0x64
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	1ad3      	subs	r3, r2, r3
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	3332      	adds	r3, #50	; 0x32
 80042f6:	4a08      	ldr	r2, [pc, #32]	; (8004318 <UART_SetConfig+0x4e4>)
 80042f8:	fba2 2303 	umull	r2, r3, r2, r3
 80042fc:	095b      	lsrs	r3, r3, #5
 80042fe:	f003 020f 	and.w	r2, r3, #15
 8004302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4422      	add	r2, r4
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004312:	46bd      	mov	sp, r7
 8004314:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004318:	51eb851f 	.word	0x51eb851f

0800431c <__utoa>:
 800431c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800431e:	4c1f      	ldr	r4, [pc, #124]	; (800439c <__utoa+0x80>)
 8004320:	b08b      	sub	sp, #44	; 0x2c
 8004322:	4605      	mov	r5, r0
 8004324:	460b      	mov	r3, r1
 8004326:	466e      	mov	r6, sp
 8004328:	f104 0c20 	add.w	ip, r4, #32
 800432c:	6820      	ldr	r0, [r4, #0]
 800432e:	6861      	ldr	r1, [r4, #4]
 8004330:	4637      	mov	r7, r6
 8004332:	c703      	stmia	r7!, {r0, r1}
 8004334:	3408      	adds	r4, #8
 8004336:	4564      	cmp	r4, ip
 8004338:	463e      	mov	r6, r7
 800433a:	d1f7      	bne.n	800432c <__utoa+0x10>
 800433c:	7921      	ldrb	r1, [r4, #4]
 800433e:	7139      	strb	r1, [r7, #4]
 8004340:	1e91      	subs	r1, r2, #2
 8004342:	6820      	ldr	r0, [r4, #0]
 8004344:	6038      	str	r0, [r7, #0]
 8004346:	2922      	cmp	r1, #34	; 0x22
 8004348:	f04f 0100 	mov.w	r1, #0
 800434c:	d904      	bls.n	8004358 <__utoa+0x3c>
 800434e:	7019      	strb	r1, [r3, #0]
 8004350:	460b      	mov	r3, r1
 8004352:	4618      	mov	r0, r3
 8004354:	b00b      	add	sp, #44	; 0x2c
 8004356:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004358:	1e58      	subs	r0, r3, #1
 800435a:	4684      	mov	ip, r0
 800435c:	fbb5 f7f2 	udiv	r7, r5, r2
 8004360:	fb02 5617 	mls	r6, r2, r7, r5
 8004364:	3628      	adds	r6, #40	; 0x28
 8004366:	446e      	add	r6, sp
 8004368:	460c      	mov	r4, r1
 800436a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800436e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8004372:	462e      	mov	r6, r5
 8004374:	42b2      	cmp	r2, r6
 8004376:	f101 0101 	add.w	r1, r1, #1
 800437a:	463d      	mov	r5, r7
 800437c:	d9ee      	bls.n	800435c <__utoa+0x40>
 800437e:	2200      	movs	r2, #0
 8004380:	545a      	strb	r2, [r3, r1]
 8004382:	1919      	adds	r1, r3, r4
 8004384:	1aa5      	subs	r5, r4, r2
 8004386:	42aa      	cmp	r2, r5
 8004388:	dae3      	bge.n	8004352 <__utoa+0x36>
 800438a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800438e:	780e      	ldrb	r6, [r1, #0]
 8004390:	7006      	strb	r6, [r0, #0]
 8004392:	3201      	adds	r2, #1
 8004394:	f801 5901 	strb.w	r5, [r1], #-1
 8004398:	e7f4      	b.n	8004384 <__utoa+0x68>
 800439a:	bf00      	nop
 800439c:	08004c10 	.word	0x08004c10

080043a0 <utoa>:
 80043a0:	f7ff bfbc 	b.w	800431c <__utoa>

080043a4 <memset>:
 80043a4:	4402      	add	r2, r0
 80043a6:	4603      	mov	r3, r0
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d100      	bne.n	80043ae <memset+0xa>
 80043ac:	4770      	bx	lr
 80043ae:	f803 1b01 	strb.w	r1, [r3], #1
 80043b2:	e7f9      	b.n	80043a8 <memset+0x4>

080043b4 <__errno>:
 80043b4:	4b01      	ldr	r3, [pc, #4]	; (80043bc <__errno+0x8>)
 80043b6:	6818      	ldr	r0, [r3, #0]
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	2000005c 	.word	0x2000005c

080043c0 <__libc_init_array>:
 80043c0:	b570      	push	{r4, r5, r6, lr}
 80043c2:	4d0d      	ldr	r5, [pc, #52]	; (80043f8 <__libc_init_array+0x38>)
 80043c4:	4c0d      	ldr	r4, [pc, #52]	; (80043fc <__libc_init_array+0x3c>)
 80043c6:	1b64      	subs	r4, r4, r5
 80043c8:	10a4      	asrs	r4, r4, #2
 80043ca:	2600      	movs	r6, #0
 80043cc:	42a6      	cmp	r6, r4
 80043ce:	d109      	bne.n	80043e4 <__libc_init_array+0x24>
 80043d0:	4d0b      	ldr	r5, [pc, #44]	; (8004400 <__libc_init_array+0x40>)
 80043d2:	4c0c      	ldr	r4, [pc, #48]	; (8004404 <__libc_init_array+0x44>)
 80043d4:	f000 fbda 	bl	8004b8c <_init>
 80043d8:	1b64      	subs	r4, r4, r5
 80043da:	10a4      	asrs	r4, r4, #2
 80043dc:	2600      	movs	r6, #0
 80043de:	42a6      	cmp	r6, r4
 80043e0:	d105      	bne.n	80043ee <__libc_init_array+0x2e>
 80043e2:	bd70      	pop	{r4, r5, r6, pc}
 80043e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80043e8:	4798      	blx	r3
 80043ea:	3601      	adds	r6, #1
 80043ec:	e7ee      	b.n	80043cc <__libc_init_array+0xc>
 80043ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80043f2:	4798      	blx	r3
 80043f4:	3601      	adds	r6, #1
 80043f6:	e7f2      	b.n	80043de <__libc_init_array+0x1e>
 80043f8:	08004c58 	.word	0x08004c58
 80043fc:	08004c58 	.word	0x08004c58
 8004400:	08004c58 	.word	0x08004c58
 8004404:	08004c5c 	.word	0x08004c5c

08004408 <powf>:
 8004408:	b508      	push	{r3, lr}
 800440a:	ed2d 8b04 	vpush	{d8-d9}
 800440e:	eeb0 8a60 	vmov.f32	s16, s1
 8004412:	eeb0 9a40 	vmov.f32	s18, s0
 8004416:	f000 f85b 	bl	80044d0 <__ieee754_powf>
 800441a:	eeb4 8a48 	vcmp.f32	s16, s16
 800441e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004422:	eef0 8a40 	vmov.f32	s17, s0
 8004426:	d63e      	bvs.n	80044a6 <powf+0x9e>
 8004428:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800442c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004430:	d112      	bne.n	8004458 <powf+0x50>
 8004432:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	d039      	beq.n	80044b0 <powf+0xa8>
 800443c:	eeb0 0a48 	vmov.f32	s0, s16
 8004440:	f000 f839 	bl	80044b6 <finitef>
 8004444:	b378      	cbz	r0, 80044a6 <powf+0x9e>
 8004446:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800444a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800444e:	d52a      	bpl.n	80044a6 <powf+0x9e>
 8004450:	f7ff ffb0 	bl	80043b4 <__errno>
 8004454:	2322      	movs	r3, #34	; 0x22
 8004456:	e014      	b.n	8004482 <powf+0x7a>
 8004458:	f000 f82d 	bl	80044b6 <finitef>
 800445c:	b998      	cbnz	r0, 8004486 <powf+0x7e>
 800445e:	eeb0 0a49 	vmov.f32	s0, s18
 8004462:	f000 f828 	bl	80044b6 <finitef>
 8004466:	b170      	cbz	r0, 8004486 <powf+0x7e>
 8004468:	eeb0 0a48 	vmov.f32	s0, s16
 800446c:	f000 f823 	bl	80044b6 <finitef>
 8004470:	b148      	cbz	r0, 8004486 <powf+0x7e>
 8004472:	eef4 8a68 	vcmp.f32	s17, s17
 8004476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800447a:	d7e9      	bvc.n	8004450 <powf+0x48>
 800447c:	f7ff ff9a 	bl	80043b4 <__errno>
 8004480:	2321      	movs	r3, #33	; 0x21
 8004482:	6003      	str	r3, [r0, #0]
 8004484:	e00f      	b.n	80044a6 <powf+0x9e>
 8004486:	eef5 8a40 	vcmp.f32	s17, #0.0
 800448a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800448e:	d10a      	bne.n	80044a6 <powf+0x9e>
 8004490:	eeb0 0a49 	vmov.f32	s0, s18
 8004494:	f000 f80f 	bl	80044b6 <finitef>
 8004498:	b128      	cbz	r0, 80044a6 <powf+0x9e>
 800449a:	eeb0 0a48 	vmov.f32	s0, s16
 800449e:	f000 f80a 	bl	80044b6 <finitef>
 80044a2:	2800      	cmp	r0, #0
 80044a4:	d1d4      	bne.n	8004450 <powf+0x48>
 80044a6:	eeb0 0a68 	vmov.f32	s0, s17
 80044aa:	ecbd 8b04 	vpop	{d8-d9}
 80044ae:	bd08      	pop	{r3, pc}
 80044b0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80044b4:	e7f7      	b.n	80044a6 <powf+0x9e>

080044b6 <finitef>:
 80044b6:	b082      	sub	sp, #8
 80044b8:	ed8d 0a01 	vstr	s0, [sp, #4]
 80044bc:	9801      	ldr	r0, [sp, #4]
 80044be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80044c2:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 80044c6:	bfac      	ite	ge
 80044c8:	2000      	movge	r0, #0
 80044ca:	2001      	movlt	r0, #1
 80044cc:	b002      	add	sp, #8
 80044ce:	4770      	bx	lr

080044d0 <__ieee754_powf>:
 80044d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80044d4:	ee10 4a90 	vmov	r4, s1
 80044d8:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 80044dc:	ed2d 8b02 	vpush	{d8}
 80044e0:	ee10 7a10 	vmov	r7, s0
 80044e4:	eeb0 8a40 	vmov.f32	s16, s0
 80044e8:	eef0 8a60 	vmov.f32	s17, s1
 80044ec:	d10c      	bne.n	8004508 <__ieee754_powf+0x38>
 80044ee:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 80044f2:	007f      	lsls	r7, r7, #1
 80044f4:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 80044f8:	f240 8292 	bls.w	8004a20 <__ieee754_powf+0x550>
 80044fc:	ee38 0a28 	vadd.f32	s0, s16, s17
 8004500:	ecbd 8b02 	vpop	{d8}
 8004504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004508:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800450c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004510:	dcf4      	bgt.n	80044fc <__ieee754_powf+0x2c>
 8004512:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8004516:	dd08      	ble.n	800452a <__ieee754_powf+0x5a>
 8004518:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800451c:	d1ee      	bne.n	80044fc <__ieee754_powf+0x2c>
 800451e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 8004522:	0064      	lsls	r4, r4, #1
 8004524:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 8004528:	e7e6      	b.n	80044f8 <__ieee754_powf+0x28>
 800452a:	2f00      	cmp	r7, #0
 800452c:	da20      	bge.n	8004570 <__ieee754_powf+0xa0>
 800452e:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8004532:	da2d      	bge.n	8004590 <__ieee754_powf+0xc0>
 8004534:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8004538:	f2c0 827b 	blt.w	8004a32 <__ieee754_powf+0x562>
 800453c:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8004540:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8004544:	fa48 f603 	asr.w	r6, r8, r3
 8004548:	fa06 f303 	lsl.w	r3, r6, r3
 800454c:	4543      	cmp	r3, r8
 800454e:	f040 8270 	bne.w	8004a32 <__ieee754_powf+0x562>
 8004552:	f006 0601 	and.w	r6, r6, #1
 8004556:	f1c6 0602 	rsb	r6, r6, #2
 800455a:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800455e:	d11f      	bne.n	80045a0 <__ieee754_powf+0xd0>
 8004560:	2c00      	cmp	r4, #0
 8004562:	f280 8263 	bge.w	8004a2c <__ieee754_powf+0x55c>
 8004566:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800456a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800456e:	e7c7      	b.n	8004500 <__ieee754_powf+0x30>
 8004570:	2600      	movs	r6, #0
 8004572:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 8004576:	d1f0      	bne.n	800455a <__ieee754_powf+0x8a>
 8004578:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800457c:	f000 8250 	beq.w	8004a20 <__ieee754_powf+0x550>
 8004580:	dd08      	ble.n	8004594 <__ieee754_powf+0xc4>
 8004582:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8004888 <__ieee754_powf+0x3b8>
 8004586:	2c00      	cmp	r4, #0
 8004588:	bfa8      	it	ge
 800458a:	eeb0 0a68 	vmovge.f32	s0, s17
 800458e:	e7b7      	b.n	8004500 <__ieee754_powf+0x30>
 8004590:	2602      	movs	r6, #2
 8004592:	e7ee      	b.n	8004572 <__ieee754_powf+0xa2>
 8004594:	2c00      	cmp	r4, #0
 8004596:	f280 8246 	bge.w	8004a26 <__ieee754_powf+0x556>
 800459a:	eeb1 0a68 	vneg.f32	s0, s17
 800459e:	e7af      	b.n	8004500 <__ieee754_powf+0x30>
 80045a0:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 80045a4:	d102      	bne.n	80045ac <__ieee754_powf+0xdc>
 80045a6:	ee28 0a08 	vmul.f32	s0, s16, s16
 80045aa:	e7a9      	b.n	8004500 <__ieee754_powf+0x30>
 80045ac:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80045b0:	eeb0 0a48 	vmov.f32	s0, s16
 80045b4:	d107      	bne.n	80045c6 <__ieee754_powf+0xf6>
 80045b6:	2f00      	cmp	r7, #0
 80045b8:	db05      	blt.n	80045c6 <__ieee754_powf+0xf6>
 80045ba:	ecbd 8b02 	vpop	{d8}
 80045be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c2:	f000 badf 	b.w	8004b84 <__ieee754_sqrtf>
 80045c6:	f000 fa4d 	bl	8004a64 <fabsf>
 80045ca:	b125      	cbz	r5, 80045d6 <__ieee754_powf+0x106>
 80045cc:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 80045d0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 80045d4:	d115      	bne.n	8004602 <__ieee754_powf+0x132>
 80045d6:	2c00      	cmp	r4, #0
 80045d8:	bfbc      	itt	lt
 80045da:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80045de:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80045e2:	2f00      	cmp	r7, #0
 80045e4:	da8c      	bge.n	8004500 <__ieee754_powf+0x30>
 80045e6:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 80045ea:	4335      	orrs	r5, r6
 80045ec:	d104      	bne.n	80045f8 <__ieee754_powf+0x128>
 80045ee:	ee70 7a40 	vsub.f32	s15, s0, s0
 80045f2:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80045f6:	e783      	b.n	8004500 <__ieee754_powf+0x30>
 80045f8:	2e01      	cmp	r6, #1
 80045fa:	d181      	bne.n	8004500 <__ieee754_powf+0x30>
 80045fc:	eeb1 0a40 	vneg.f32	s0, s0
 8004600:	e77e      	b.n	8004500 <__ieee754_powf+0x30>
 8004602:	0ff8      	lsrs	r0, r7, #31
 8004604:	3801      	subs	r0, #1
 8004606:	ea56 0300 	orrs.w	r3, r6, r0
 800460a:	d104      	bne.n	8004616 <__ieee754_powf+0x146>
 800460c:	ee38 8a48 	vsub.f32	s16, s16, s16
 8004610:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8004614:	e774      	b.n	8004500 <__ieee754_powf+0x30>
 8004616:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800461a:	dd73      	ble.n	8004704 <__ieee754_powf+0x234>
 800461c:	4b9b      	ldr	r3, [pc, #620]	; (800488c <__ieee754_powf+0x3bc>)
 800461e:	429d      	cmp	r5, r3
 8004620:	dc08      	bgt.n	8004634 <__ieee754_powf+0x164>
 8004622:	2c00      	cmp	r4, #0
 8004624:	da0b      	bge.n	800463e <__ieee754_powf+0x16e>
 8004626:	2000      	movs	r0, #0
 8004628:	ecbd 8b02 	vpop	{d8}
 800462c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004630:	f000 baa2 	b.w	8004b78 <__math_oflowf>
 8004634:	4b96      	ldr	r3, [pc, #600]	; (8004890 <__ieee754_powf+0x3c0>)
 8004636:	429d      	cmp	r5, r3
 8004638:	dd08      	ble.n	800464c <__ieee754_powf+0x17c>
 800463a:	2c00      	cmp	r4, #0
 800463c:	dcf3      	bgt.n	8004626 <__ieee754_powf+0x156>
 800463e:	2000      	movs	r0, #0
 8004640:	ecbd 8b02 	vpop	{d8}
 8004644:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004648:	f000 ba90 	b.w	8004b6c <__math_uflowf>
 800464c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8004650:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004654:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8004894 <__ieee754_powf+0x3c4>
 8004658:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800465c:	eee0 6a67 	vfms.f32	s13, s0, s15
 8004660:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004664:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8004668:	ee20 7a00 	vmul.f32	s14, s0, s0
 800466c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004670:	eddf 7a89 	vldr	s15, [pc, #548]	; 8004898 <__ieee754_powf+0x3c8>
 8004674:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8004678:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800489c <__ieee754_powf+0x3cc>
 800467c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8004680:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80048a0 <__ieee754_powf+0x3d0>
 8004684:	eef0 6a67 	vmov.f32	s13, s15
 8004688:	eee0 6a07 	vfma.f32	s13, s0, s14
 800468c:	ee16 3a90 	vmov	r3, s13
 8004690:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004694:	f023 030f 	bic.w	r3, r3, #15
 8004698:	ee06 3a90 	vmov	s13, r3
 800469c:	eee0 6a47 	vfms.f32	s13, s0, s14
 80046a0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80046a4:	3e01      	subs	r6, #1
 80046a6:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 80046aa:	4306      	orrs	r6, r0
 80046ac:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80046b0:	f024 040f 	bic.w	r4, r4, #15
 80046b4:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 80046b8:	bf08      	it	eq
 80046ba:	eeb0 8a47 	vmoveq.f32	s16, s14
 80046be:	ee07 4a10 	vmov	s14, r4
 80046c2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 80046c6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eee7 0a27 	vfma.f32	s1, s14, s15
 80046d2:	ee07 4a10 	vmov	s14, r4
 80046d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046da:	ee30 7aa7 	vadd.f32	s14, s1, s15
 80046de:	ee17 1a10 	vmov	r1, s14
 80046e2:	2900      	cmp	r1, #0
 80046e4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80046e8:	f340 817c 	ble.w	80049e4 <__ieee754_powf+0x514>
 80046ec:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 80046f0:	f340 80f8 	ble.w	80048e4 <__ieee754_powf+0x414>
 80046f4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	bf4c      	ite	mi
 80046fe:	2001      	movmi	r0, #1
 8004700:	2000      	movpl	r0, #0
 8004702:	e791      	b.n	8004628 <__ieee754_powf+0x158>
 8004704:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8004708:	bf01      	itttt	eq
 800470a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 80048a4 <__ieee754_powf+0x3d4>
 800470e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8004712:	f06f 0317 	mvneq.w	r3, #23
 8004716:	ee17 5a90 	vmoveq	r5, s15
 800471a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800471e:	bf18      	it	ne
 8004720:	2300      	movne	r3, #0
 8004722:	3a7f      	subs	r2, #127	; 0x7f
 8004724:	441a      	add	r2, r3
 8004726:	4b60      	ldr	r3, [pc, #384]	; (80048a8 <__ieee754_powf+0x3d8>)
 8004728:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800472c:	429d      	cmp	r5, r3
 800472e:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8004732:	dd06      	ble.n	8004742 <__ieee754_powf+0x272>
 8004734:	4b5d      	ldr	r3, [pc, #372]	; (80048ac <__ieee754_powf+0x3dc>)
 8004736:	429d      	cmp	r5, r3
 8004738:	f340 80a4 	ble.w	8004884 <__ieee754_powf+0x3b4>
 800473c:	3201      	adds	r2, #1
 800473e:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8004742:	2500      	movs	r5, #0
 8004744:	4b5a      	ldr	r3, [pc, #360]	; (80048b0 <__ieee754_powf+0x3e0>)
 8004746:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800474a:	ee07 1a10 	vmov	s14, r1
 800474e:	edd3 5a00 	vldr	s11, [r3]
 8004752:	4b58      	ldr	r3, [pc, #352]	; (80048b4 <__ieee754_powf+0x3e4>)
 8004754:	ee75 7a87 	vadd.f32	s15, s11, s14
 8004758:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800475c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8004760:	1049      	asrs	r1, r1, #1
 8004762:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8004766:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800476a:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800476e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8004772:	ee07 1a90 	vmov	s15, r1
 8004776:	ee26 5a24 	vmul.f32	s10, s12, s9
 800477a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800477e:	ee15 7a10 	vmov	r7, s10
 8004782:	401f      	ands	r7, r3
 8004784:	ee06 7a90 	vmov	s13, r7
 8004788:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800478c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8004790:	ee65 7a05 	vmul.f32	s15, s10, s10
 8004794:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8004798:	eddf 5a47 	vldr	s11, [pc, #284]	; 80048b8 <__ieee754_powf+0x3e8>
 800479c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80048bc <__ieee754_powf+0x3ec>
 80047a0:	eee7 5a87 	vfma.f32	s11, s15, s14
 80047a4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80048c0 <__ieee754_powf+0x3f0>
 80047a8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80047ac:	eddf 5a39 	vldr	s11, [pc, #228]	; 8004894 <__ieee754_powf+0x3c4>
 80047b0:	eee7 5a27 	vfma.f32	s11, s14, s15
 80047b4:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80048c4 <__ieee754_powf+0x3f4>
 80047b8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80047bc:	eddf 5a42 	vldr	s11, [pc, #264]	; 80048c8 <__ieee754_powf+0x3f8>
 80047c0:	ee26 6a24 	vmul.f32	s12, s12, s9
 80047c4:	eee7 5a27 	vfma.f32	s11, s14, s15
 80047c8:	ee35 7a26 	vadd.f32	s14, s10, s13
 80047cc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 80047d0:	ee27 7a06 	vmul.f32	s14, s14, s12
 80047d4:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 80047d8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 80047dc:	eef0 5a67 	vmov.f32	s11, s15
 80047e0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 80047e4:	ee75 5a87 	vadd.f32	s11, s11, s14
 80047e8:	ee15 1a90 	vmov	r1, s11
 80047ec:	4019      	ands	r1, r3
 80047ee:	ee05 1a90 	vmov	s11, r1
 80047f2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80047f6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 80047fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047fe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8004802:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004806:	eeb0 6a67 	vmov.f32	s12, s15
 800480a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800480e:	ee16 1a10 	vmov	r1, s12
 8004812:	4019      	ands	r1, r3
 8004814:	ee07 1a10 	vmov	s14, r1
 8004818:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800481c:	ee06 1a10 	vmov	s12, r1
 8004820:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004824:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80048cc <__ieee754_powf+0x3fc>
 8004828:	4929      	ldr	r1, [pc, #164]	; (80048d0 <__ieee754_powf+0x400>)
 800482a:	eddf 5a2a 	vldr	s11, [pc, #168]	; 80048d4 <__ieee754_powf+0x404>
 800482e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004832:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80048d8 <__ieee754_powf+0x408>
 8004836:	eee6 7a07 	vfma.f32	s15, s12, s14
 800483a:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800483e:	ed91 7a00 	vldr	s14, [r1]
 8004842:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004846:	ee07 2a10 	vmov	s14, r2
 800484a:	eef0 6a67 	vmov.f32	s13, s15
 800484e:	4a23      	ldr	r2, [pc, #140]	; (80048dc <__ieee754_powf+0x40c>)
 8004850:	eee6 6a25 	vfma.f32	s13, s12, s11
 8004854:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8004858:	ed92 5a00 	vldr	s10, [r2]
 800485c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004860:	ee76 6a85 	vadd.f32	s13, s13, s10
 8004864:	ee76 6a87 	vadd.f32	s13, s13, s14
 8004868:	ee16 2a90 	vmov	r2, s13
 800486c:	4013      	ands	r3, r2
 800486e:	ee06 3a90 	vmov	s13, r3
 8004872:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004876:	ee37 7a45 	vsub.f32	s14, s14, s10
 800487a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800487e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004882:	e70f      	b.n	80046a4 <__ieee754_powf+0x1d4>
 8004884:	2501      	movs	r5, #1
 8004886:	e75d      	b.n	8004744 <__ieee754_powf+0x274>
 8004888:	00000000 	.word	0x00000000
 800488c:	3f7ffff3 	.word	0x3f7ffff3
 8004890:	3f800007 	.word	0x3f800007
 8004894:	3eaaaaab 	.word	0x3eaaaaab
 8004898:	3fb8aa3b 	.word	0x3fb8aa3b
 800489c:	36eca570 	.word	0x36eca570
 80048a0:	3fb8aa00 	.word	0x3fb8aa00
 80048a4:	4b800000 	.word	0x4b800000
 80048a8:	001cc471 	.word	0x001cc471
 80048ac:	005db3d6 	.word	0x005db3d6
 80048b0:	08004c38 	.word	0x08004c38
 80048b4:	fffff000 	.word	0xfffff000
 80048b8:	3e6c3255 	.word	0x3e6c3255
 80048bc:	3e53f142 	.word	0x3e53f142
 80048c0:	3e8ba305 	.word	0x3e8ba305
 80048c4:	3edb6db7 	.word	0x3edb6db7
 80048c8:	3f19999a 	.word	0x3f19999a
 80048cc:	3f76384f 	.word	0x3f76384f
 80048d0:	08004c48 	.word	0x08004c48
 80048d4:	3f763800 	.word	0x3f763800
 80048d8:	369dc3a0 	.word	0x369dc3a0
 80048dc:	08004c40 	.word	0x08004c40
 80048e0:	3338aa3c 	.word	0x3338aa3c
 80048e4:	f040 8093 	bne.w	8004a0e <__ieee754_powf+0x53e>
 80048e8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 80048e0 <__ieee754_powf+0x410>
 80048ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80048f0:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80048f4:	eef4 6ac7 	vcmpe.f32	s13, s14
 80048f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048fc:	f73f aefa 	bgt.w	80046f4 <__ieee754_powf+0x224>
 8004900:	15db      	asrs	r3, r3, #23
 8004902:	3b7e      	subs	r3, #126	; 0x7e
 8004904:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004908:	4118      	asrs	r0, r3
 800490a:	4408      	add	r0, r1
 800490c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8004910:	4a49      	ldr	r2, [pc, #292]	; (8004a38 <__ieee754_powf+0x568>)
 8004912:	3b7f      	subs	r3, #127	; 0x7f
 8004914:	411a      	asrs	r2, r3
 8004916:	4002      	ands	r2, r0
 8004918:	ee07 2a10 	vmov	s14, r2
 800491c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8004920:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004924:	f1c3 0317 	rsb	r3, r3, #23
 8004928:	4118      	asrs	r0, r3
 800492a:	2900      	cmp	r1, #0
 800492c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004930:	bfb8      	it	lt
 8004932:	4240      	neglt	r0, r0
 8004934:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8004938:	eddf 6a40 	vldr	s13, [pc, #256]	; 8004a3c <__ieee754_powf+0x56c>
 800493c:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8004a40 <__ieee754_powf+0x570>
 8004940:	ee17 3a10 	vmov	r3, s14
 8004944:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004948:	f023 030f 	bic.w	r3, r3, #15
 800494c:	ee07 3a10 	vmov	s14, r3
 8004950:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004954:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004958:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800495c:	eddf 7a39 	vldr	s15, [pc, #228]	; 8004a44 <__ieee754_powf+0x574>
 8004960:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004964:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8004968:	eef0 6a67 	vmov.f32	s13, s15
 800496c:	eee7 6a06 	vfma.f32	s13, s14, s12
 8004970:	eef0 5a66 	vmov.f32	s11, s13
 8004974:	eee7 5a46 	vfms.f32	s11, s14, s12
 8004978:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800497c:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8004980:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8004a48 <__ieee754_powf+0x578>
 8004984:	eddf 5a31 	vldr	s11, [pc, #196]	; 8004a4c <__ieee754_powf+0x57c>
 8004988:	eea7 6a25 	vfma.f32	s12, s14, s11
 800498c:	eddf 5a30 	vldr	s11, [pc, #192]	; 8004a50 <__ieee754_powf+0x580>
 8004990:	eee6 5a07 	vfma.f32	s11, s12, s14
 8004994:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8004a54 <__ieee754_powf+0x584>
 8004998:	eea5 6a87 	vfma.f32	s12, s11, s14
 800499c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004a58 <__ieee754_powf+0x588>
 80049a0:	eee6 5a07 	vfma.f32	s11, s12, s14
 80049a4:	eeb0 6a66 	vmov.f32	s12, s13
 80049a8:	eea5 6ac7 	vfms.f32	s12, s11, s14
 80049ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80049b0:	ee66 5a86 	vmul.f32	s11, s13, s12
 80049b4:	ee36 6a47 	vsub.f32	s12, s12, s14
 80049b8:	eee6 7aa7 	vfma.f32	s15, s13, s15
 80049bc:	ee85 7a86 	vdiv.f32	s14, s11, s12
 80049c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80049c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80049cc:	ee10 3a10 	vmov	r3, s0
 80049d0:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 80049d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80049d8:	da1f      	bge.n	8004a1a <__ieee754_powf+0x54a>
 80049da:	f000 f84b 	bl	8004a74 <scalbnf>
 80049de:	ee20 0a08 	vmul.f32	s0, s0, s16
 80049e2:	e58d      	b.n	8004500 <__ieee754_powf+0x30>
 80049e4:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <__ieee754_powf+0x58c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	dd07      	ble.n	80049fa <__ieee754_powf+0x52a>
 80049ea:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80049ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f2:	bf4c      	ite	mi
 80049f4:	2001      	movmi	r0, #1
 80049f6:	2000      	movpl	r0, #0
 80049f8:	e622      	b.n	8004640 <__ieee754_powf+0x170>
 80049fa:	d108      	bne.n	8004a0e <__ieee754_powf+0x53e>
 80049fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a00:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8004a04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a08:	f6ff af7a 	blt.w	8004900 <__ieee754_powf+0x430>
 8004a0c:	e7ed      	b.n	80049ea <__ieee754_powf+0x51a>
 8004a0e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8004a12:	f73f af75 	bgt.w	8004900 <__ieee754_powf+0x430>
 8004a16:	2000      	movs	r0, #0
 8004a18:	e78c      	b.n	8004934 <__ieee754_powf+0x464>
 8004a1a:	ee00 3a10 	vmov	s0, r3
 8004a1e:	e7de      	b.n	80049de <__ieee754_powf+0x50e>
 8004a20:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004a24:	e56c      	b.n	8004500 <__ieee754_powf+0x30>
 8004a26:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004a60 <__ieee754_powf+0x590>
 8004a2a:	e569      	b.n	8004500 <__ieee754_powf+0x30>
 8004a2c:	eeb0 0a48 	vmov.f32	s0, s16
 8004a30:	e566      	b.n	8004500 <__ieee754_powf+0x30>
 8004a32:	2600      	movs	r6, #0
 8004a34:	e591      	b.n	800455a <__ieee754_powf+0x8a>
 8004a36:	bf00      	nop
 8004a38:	ff800000 	.word	0xff800000
 8004a3c:	3f317218 	.word	0x3f317218
 8004a40:	3f317200 	.word	0x3f317200
 8004a44:	35bfbe8c 	.word	0x35bfbe8c
 8004a48:	b5ddea0e 	.word	0xb5ddea0e
 8004a4c:	3331bb4c 	.word	0x3331bb4c
 8004a50:	388ab355 	.word	0x388ab355
 8004a54:	bb360b61 	.word	0xbb360b61
 8004a58:	3e2aaaab 	.word	0x3e2aaaab
 8004a5c:	43160000 	.word	0x43160000
 8004a60:	00000000 	.word	0x00000000

08004a64 <fabsf>:
 8004a64:	ee10 3a10 	vmov	r3, s0
 8004a68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a6c:	ee00 3a10 	vmov	s0, r3
 8004a70:	4770      	bx	lr
	...

08004a74 <scalbnf>:
 8004a74:	ee10 3a10 	vmov	r3, s0
 8004a78:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004a7c:	d02b      	beq.n	8004ad6 <scalbnf+0x62>
 8004a7e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004a82:	d302      	bcc.n	8004a8a <scalbnf+0x16>
 8004a84:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004a88:	4770      	bx	lr
 8004a8a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004a8e:	d123      	bne.n	8004ad8 <scalbnf+0x64>
 8004a90:	4b24      	ldr	r3, [pc, #144]	; (8004b24 <scalbnf+0xb0>)
 8004a92:	eddf 7a25 	vldr	s15, [pc, #148]	; 8004b28 <scalbnf+0xb4>
 8004a96:	4298      	cmp	r0, r3
 8004a98:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004a9c:	db17      	blt.n	8004ace <scalbnf+0x5a>
 8004a9e:	ee10 3a10 	vmov	r3, s0
 8004aa2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004aa6:	3a19      	subs	r2, #25
 8004aa8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004aac:	4288      	cmp	r0, r1
 8004aae:	dd15      	ble.n	8004adc <scalbnf+0x68>
 8004ab0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8004b2c <scalbnf+0xb8>
 8004ab4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004b30 <scalbnf+0xbc>
 8004ab8:	ee10 3a10 	vmov	r3, s0
 8004abc:	eeb0 7a67 	vmov.f32	s14, s15
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	bfb8      	it	lt
 8004ac4:	eef0 7a66 	vmovlt.f32	s15, s13
 8004ac8:	ee27 0a87 	vmul.f32	s0, s15, s14
 8004acc:	4770      	bx	lr
 8004ace:	eddf 7a19 	vldr	s15, [pc, #100]	; 8004b34 <scalbnf+0xc0>
 8004ad2:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004ad6:	4770      	bx	lr
 8004ad8:	0dd2      	lsrs	r2, r2, #23
 8004ada:	e7e5      	b.n	8004aa8 <scalbnf+0x34>
 8004adc:	4410      	add	r0, r2
 8004ade:	28fe      	cmp	r0, #254	; 0xfe
 8004ae0:	dce6      	bgt.n	8004ab0 <scalbnf+0x3c>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	dd06      	ble.n	8004af4 <scalbnf+0x80>
 8004ae6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004aea:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004aee:	ee00 3a10 	vmov	s0, r3
 8004af2:	4770      	bx	lr
 8004af4:	f110 0f16 	cmn.w	r0, #22
 8004af8:	da09      	bge.n	8004b0e <scalbnf+0x9a>
 8004afa:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8004b34 <scalbnf+0xc0>
 8004afe:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8004b38 <scalbnf+0xc4>
 8004b02:	ee10 3a10 	vmov	r3, s0
 8004b06:	eeb0 7a67 	vmov.f32	s14, s15
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	e7d9      	b.n	8004ac2 <scalbnf+0x4e>
 8004b0e:	3019      	adds	r0, #25
 8004b10:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004b14:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8004b18:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8004b3c <scalbnf+0xc8>
 8004b1c:	ee07 3a90 	vmov	s15, r3
 8004b20:	e7d7      	b.n	8004ad2 <scalbnf+0x5e>
 8004b22:	bf00      	nop
 8004b24:	ffff3cb0 	.word	0xffff3cb0
 8004b28:	4c000000 	.word	0x4c000000
 8004b2c:	7149f2ca 	.word	0x7149f2ca
 8004b30:	f149f2ca 	.word	0xf149f2ca
 8004b34:	0da24260 	.word	0x0da24260
 8004b38:	8da24260 	.word	0x8da24260
 8004b3c:	33000000 	.word	0x33000000

08004b40 <with_errnof>:
 8004b40:	b513      	push	{r0, r1, r4, lr}
 8004b42:	4604      	mov	r4, r0
 8004b44:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004b48:	f7ff fc34 	bl	80043b4 <__errno>
 8004b4c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004b50:	6004      	str	r4, [r0, #0]
 8004b52:	b002      	add	sp, #8
 8004b54:	bd10      	pop	{r4, pc}

08004b56 <xflowf>:
 8004b56:	b130      	cbz	r0, 8004b66 <xflowf+0x10>
 8004b58:	eef1 7a40 	vneg.f32	s15, s0
 8004b5c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004b60:	2022      	movs	r0, #34	; 0x22
 8004b62:	f7ff bfed 	b.w	8004b40 <with_errnof>
 8004b66:	eef0 7a40 	vmov.f32	s15, s0
 8004b6a:	e7f7      	b.n	8004b5c <xflowf+0x6>

08004b6c <__math_uflowf>:
 8004b6c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004b74 <__math_uflowf+0x8>
 8004b70:	f7ff bff1 	b.w	8004b56 <xflowf>
 8004b74:	10000000 	.word	0x10000000

08004b78 <__math_oflowf>:
 8004b78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004b80 <__math_oflowf+0x8>
 8004b7c:	f7ff bfeb 	b.w	8004b56 <xflowf>
 8004b80:	70000000 	.word	0x70000000

08004b84 <__ieee754_sqrtf>:
 8004b84:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004b88:	4770      	bx	lr
	...

08004b8c <_init>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr

08004b98 <_fini>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr
